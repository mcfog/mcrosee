<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ichizon on mc-inside </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://inside.mcfog.wang/categories/ichizon/index.xml/</link>
    
    
    
    <updated>Mon, 09 Feb 2015 18:28:43 CST</updated>
    
    <item>
      <title>mcfog的一己之见 VI</title>
      <link>http://inside.mcfog.wang/2015/02/ichizon-6/</link>
      <pubDate>Mon, 09 Feb 2015 18:28:43 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/ichizon-6/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;【Perl】字符串匹配：如何正确匹配出’aaaa&amp;rsquo;中的3个‘aa&amp;rsquo;模式？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002541924&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zair&#34;&gt;Zair&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一段Perl的代码，输出结果为2。然而显然在字符串&amp;rsquo;aaaa&amp;rsquo;中含有3个&amp;rsquo;aa&amp;rsquo;模式。请问如何做到3次匹配？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
$a = &#39;aaaa&#39;;
$i ++ while $a =~ /aa/g;
print $i;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
$a = &#39;aaaa&#39;;
$i ++ while $a =~ /a(?=a)/g;
print $i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正则本质是状态机一个个consume字符扭转状态，捕获成功第一个aa以后相当于前两个字符都被consume掉从第三个a开始匹配了，所以原来的结果是2，这里用&lt;strong&gt;零宽断言&lt;/strong&gt;让正则去look ahead匹配模式里第二个a而不将其consume掉，从而得到3&lt;/p&gt;

&lt;p&gt;编译原理学得不好，解释得有点乱……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;图形的力量，感觉比字清楚多了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://segmentfault.com/img/bVkPsx&#34; alt=&#34;图片描述&#34; /&gt;
&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;软件工程中的耦合性和解耦合性是什么意思?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002421856&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/iamzhoug37&#34;&gt;iamzhoug37&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看《thinking in java》和《head first 设计模式》中，两本书好多次提到了“耦合性”和“解耦合性”这两个词。一直以来都是模棱两可的，搜了一下，维基百科中的解释太专业化了，我没有看懂，通俗的讲这两个词是什么意思？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;谢谢大家的回答. 通过大家的回答, 我对于这两个概念有了初步的了解, 但是估计是我的层次不够吧, 看这两本书还是有难度,而且在实际自己编写代码的时候还是不能很好的运用设计模式的精髓, 不过我会努力的,谢谢大家&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;你正乘坐直升机游览科罗拉多大峡谷，驾驶员——他显然犯了一个错误，在吃鱼，他的午餐——突然呻吟起来，晕了过去。幸运的是，他把你留在了离地面100英尺的地方。你推断，升降杆控制总升力，所以轻轻将其压低可以让直升机平缓降向地面。然而，当你这样做时，却发现生活并非那么简单。直升机的鼻子向下，开始向左盘旋下降。突然间你发现，你驾驶的这个系统，所有的控制输入都有次级效应。压低左手的操作杆，你需要补偿性地向后移动右手柄，并踩右踏板。但这些改变中的每一项都会再次影响所有其他的控制。突然间，你在用一个让人难以置信的复杂系统玩杂耍，其中每一项改变都会影响所有其他的输入。你的工作负担异常巨大：你的手脚在不停地移动，试图平衡所有交互影响的力量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;——《程序员的修炼之道》 我认为所有程序员都应该看，而且每年都应该重新看一遍的书&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;php两种封装类的优缺点？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002544103&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/tiyee&#34;&gt;tiyee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;php很多内置的类或扩展类比较粗糙，需要人为的封装一遍，于是有了两种封装方式，
1直接继承
2内部实例化&lt;/p&gt;

&lt;p&gt;如redis类，
可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace lib
class redis extends \Redis {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace lib
class redis {
    private $_redis = null;
    public function __construct() {
        $this-&amp;gt;_redis = new \Redis()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一种方法的优点是方便，无须把所有的方法重写一遍，但是不太好统一捕捉异常，
第二种就是麻烦些，需要重写一遍所有的方法，（虽然可以用魔术方法），捕捉异常方便些。
大家用的哪种？为什么呢？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;继承&lt;/h3&gt;

&lt;p&gt;继承的特点有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔实现成本低&lt;/li&gt;
&lt;li&gt;✔调用者可以沿用原有的接口使用，学习成本低&lt;/li&gt;
&lt;li&gt;✔原有的功能无需任何代码如常工作&lt;/li&gt;

&lt;li&gt;&lt;p&gt;✘无法隐藏或改变原有的功能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;其实你_可以_这么做，就好像你确实_可以_用铁丝去捅插座眼一样&lt;/li&gt;
&lt;li&gt;改变输入、改变输出、改变行为都属于改变功能，比如原来抛的异常现在不抛了，原来return false现在变异常了，原来输入的是青椒现在变牛肉了等等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;✘正交性弱，没有做到屏蔽父类的依赖，需要更换父类的时候显得脆弱&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见的合适的应用有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加日志记录等不影响原有逻辑的“旁路逻辑”&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加一些方法，比如原有的某一些方法a()b()c()总是连续一起调用，增加一个doABC()方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;仅限简单的少量的方法，如果要加复杂的功能或者大量的方法，还是建议用组合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加一些静态／工厂方法，比如&lt;code&gt;new Redis(ip, port)&lt;/code&gt; =&amp;gt; &lt;code&gt;OurRedis::getInstance()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话说就是原有行为不变，&lt;strong&gt;is-a&lt;/strong&gt;的场景用继承。&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;组合&lt;/h3&gt;

&lt;p&gt;组合的特点有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✘实现成本略高，创建对象的过程可能会变复杂&lt;/li&gt;
&lt;li&gt;✘调用者需要理解新的接口&lt;/li&gt;
&lt;li&gt;✘需要转发才能让原有的功能工作&lt;/li&gt;
&lt;li&gt;✔很容易隐藏／屏蔽原有的部分功能&lt;/li&gt;
&lt;li&gt;✔正交性强，可以通过更换内部的对象适配不同的情况而保持外部接口不变&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见的合适的应用有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一切涉及改变行为的需求&lt;/li&gt;
&lt;li&gt;未来依赖会变的场景，比如redis会变成memcache，或者mysql会变mariadb之类&lt;/li&gt;
&lt;li&gt;需要屏蔽细节的场景，比如Session Cache等需求确实用到redis，但对外肯定要屏蔽“这是个redis实现的session”。否则恐龙会出现在你背后把你脑袋咬掉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话就是某个功能依赖另一个功能，&lt;strong&gt;use-a&lt;/strong&gt;或&lt;strong&gt;has-a&lt;/strong&gt;的场景用组合&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;偏题，predis用起来还不错，可以一试&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【接踵而至】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/rav51.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见 第五期</title>
      <link>http://inside.mcfog.wang/2015/02/ichizon-5/</link>
      <pubDate>Mon, 02 Feb 2015 10:50:02 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/ichizon-5/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;学习PHP该走什么样的路线&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000484344&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/ixiqin_com&#34;&gt;西秦公子&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;是应该看传统代码还是应该看MVC框架代码？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;是应该先看手册还是应该看成品项目？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本人情况:
了解PHP的基本语法，研究过typecho的主题，了解过MVC构架。
希望可以有大神帮忙量身定制一条路线。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;不管什么风格都要看，而且别停留在看上，动手hack一下试试模仿/修改一些功能。不知道非架构代码是啥样的情况下是不容易用好/设计好架构的&lt;/li&gt;
&lt;li&gt;你学英文(这个人又来拿英文比喻了)的时候是先看字典还是先看课文？无论怎样我觉得都不可能是&lt;strong&gt;我看完了一大本课文没翻字典查单词&lt;/strong&gt;，或者是&lt;strong&gt;我看完了牛津字典但没看半篇文章&lt;/strong&gt;。看起来好像后者还合理一点，套到编程上来也是一样的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对字典(文档)，可以先按照常用三千词的程度简单翻一遍(还存在你没经验不知道什么是常用的问题)，但主要还是靠一边看成品项目一边翻文档，最好还能一边请项目作者请教，大致讲解一下。（等价于一边看课文一边查字典，然后同时老师讲解） 开源项目的话，找不到作者可以找各种博客文章&lt;/p&gt;

&lt;p&gt;技能树方面其实不管什么语言应该都是一样的：&lt;/p&gt;

&lt;p&gt;LV0 只会语法&lt;br /&gt;
LV1 明白怎么运作，能查Bug(不太复杂的)&lt;br /&gt;
LV2 有一些思路，能添加简单功能&lt;br /&gt;
LV3 能发现问题，优化局部的结构/性能，能搞定较复杂问题&lt;br /&gt;
LV4a 对架构有心得，把握宏观架构，把握整个项目的技术体系&lt;br /&gt;
LV4b 对指挥有心得，能指挥LV2 LV3的人，合理分配任务，规避技术风险&lt;br /&gt;
LV4c 对资源有心得，能从公司内/外争取LV2 LV3的人需要的各种资源&lt;br /&gt;
LV4d 对外交有心得，能搞定其他部门的人一起合作&lt;br /&gt;
LV4e 对教学有心得，能指引各种人升级加点&lt;br /&gt;
LV5 掌握若干LV4技能的基础上，知道怎么招聘和摆平其他LV4的能人&lt;/p&gt;

&lt;p&gt;看出来了吧，我就是来点LV4e这个技能的熟练度的哈哈&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;如何理解IoC（Inversion of Control）？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000755828&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/wangshuo&#34;&gt;WS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RT，如何理解IoC（Inversion of Control）？如果能写个demo解释最好了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我试着搜了一下，中文资料基本都把IoC（控制翻转）和DI（依赖注入）混为一谈，就连&lt;a href=&#34;http://stackoverflow.com/questions/3058/what-is-inversion-of-control&#34;&gt;StackOverflow上的第一位答案&lt;/a&gt;也犯了同样的问题（幸好下面有高票的反对评论，否则我的世界观都快坏掉了）&lt;/p&gt;

&lt;p&gt;控制翻转是代码复用的一种模式（注意不是设计模式）&lt;/p&gt;

&lt;p&gt;一般（非IoC）的复用，通常是用户代码调用组件（任意形式的被复用的代码，本答案中统称为组件）。也就是用户代码解决“Why it works, What to do”，组件解决“How to do”，逻辑的入口是用户代码，&lt;/p&gt;

&lt;p&gt;而控制翻转则是组件来调用用户代码，也就是组件解决“Why it works, When to do”，用户代码解决“What to do”，逻辑的入口是组件&lt;/p&gt;

&lt;p&gt;下面是除了DI之外的控制翻转的例子&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接口／虚函数  组件调用接口／虚函数，具体由用户代码实现&lt;/li&gt;
&lt;li&gt;发布订阅（事件）模式  组件触发事件，用户代码订阅事件&lt;/li&gt;
&lt;li&gt;回调  用户代码写回调，组件来调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;几乎所有能被称之为框架的东西&lt;/strong&gt;  用户代码在规定的地方实现具体业务逻辑，剩下的框架负责&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;能简单解释一下MVC吗？越简单越好&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002456846&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/dwqs&#34;&gt;不写代码的码农&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近打算学习PHP框架，才发现我以前对MVC的认识很肤浅。但是看Laravel的文档，对MVC又是云里雾里的&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;概念大家都说了，其实MVC的涵义一直在潜移默化地变化，原本CS软件的MVC和如今php ruby python讲的MVC已经有不小的区别了。甚至很可能概念早就变成MVP，只是大家习惯了MVC，指鹿为马了&lt;/p&gt;

&lt;p&gt;我觉得已实际项目来说，作3个思想实验就能大致理解MVC的本质和目标，具体三层怎么分，是三层还是四层还是两层，其实都是为了达成灵活性和可维护性的手段而已&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;更换数据库选择&lt;/h3&gt;

&lt;p&gt;数据结构不变，把数据库从mysql迁移到pgsql乃至mongodb，你的项目需要多大的变化？
理想的MVC架构应该无需修改任何业务代码(包括Model)，只需要修改配置文件，最多写个新的DBAL driver
实际情况下不同DB的能力有微妙的区别，那也应该微调Model就能解决。&lt;/p&gt;

&lt;p&gt;如果你的答案是两眼一黑：和重写一遍差不多，那么你的M层还不够独立，该写在Model的代码分散到别处了&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;手机HTML5版本&lt;/h3&gt;

&lt;p&gt;假设保持所有功能不变（都有合理自然的移动版交互），给你的站点增加手机版，你的项目需要多大的变化？
答案应该是重写一套View，然后Controller改一行&lt;code&gt;if(isMobile) use(MobileView);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果你发现Controller要改大量逻辑，甚至Model都被牵连，那你的V层不够独立&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;增加API&lt;/h3&gt;

&lt;p&gt;假设所有功能不变，给你的站点增加开放API（给第三方或移动应用使用），你的项目需要多大的变化？
答案应该是一套新的Controller 包含新的授权、和数据格式以及校验等逻辑，和一个简单的View（只输出json或xml）&lt;/p&gt;

&lt;p&gt;如果你发现Model要改，原来View里的一些东西要挪动，或者是原来写在老的Controller里的部分代码要copy一遍，那么你的C层不够独立&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【精研战技】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m15-4.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见4th</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-4/</link>
      <pubDate>Sun, 25 Jan 2015 22:01:29 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-4/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;一个优秀的前端工程师应该具备什么样的技能？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002504410?_ea=121396&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/houxiaoqiang&#34;&gt;侯志强&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个优秀的前端工程师应该具备什么样的技能，应该从哪些方面来提高自己的专业技能还有软实力？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学力&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;迅速了解新技术，判断适用场景&lt;/li&gt;
&lt;li&gt;在合适的时机把玩新技术，迅速熟悉&lt;/li&gt;
&lt;li&gt;在合适的时机引入新技术，提高生产效率&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;google&lt;/li&gt;
&lt;li&gt;寻找和选择合适的解决方案&lt;/li&gt;
&lt;li&gt;判断解决方案靠谱程度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;沟通&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;说服队友放弃不靠谱方案&lt;/li&gt;
&lt;li&gt;对产品暴击&lt;/li&gt;
&lt;li&gt;对设计协商&lt;/li&gt;
&lt;li&gt;对后台撒娇&lt;/li&gt;
&lt;li&gt;带小朋友提高&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;个人效率&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;效率工具的发现与精通&lt;/li&gt;
&lt;li&gt;自己实现小工具小脚本&lt;/li&gt;
&lt;li&gt;时间管理&lt;/li&gt;
&lt;li&gt;个人知识管理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;说穿了任何技术岗位不都一样么！&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;高效的js，jquery语句写法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000633373&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zzzddd&#34;&gt;zzzddd&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;.merchant_page&amp;quot;).hide();
    $(&amp;quot;.cart_page&amp;quot;).show();
});

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;.merchant_page&amp;quot;).show();
    $(&amp;quot;.cart_page&amp;quot;).hide();
});

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;#shade&amp;quot;).hide();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我现在的代码像这样一坨大便一样。。。&lt;/p&gt;

&lt;p&gt;请问各位如何写成比如像jquery插件那样的一些写法，比如像这样的 &lt;code&gt;function(id){$(&amp;quot;#&amp;quot;+id).on(&amp;quot;click&amp;quot;,function(){.....})}&lt;/code&gt; 等等，有什么教程或者有什么书关于这种的嘛？&lt;/p&gt;

&lt;p&gt;谢谢各位了&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;美刀是个很重的函数，尽量其缓存结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var $merchantPage = $(&amp;quot;.merchant_page&amp;quot;);
var $cartPage = $(&amp;quot;.cart_page&amp;quot;);
var $shade = $(&amp;quot;#shade&amp;quot;);
$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $merchantPage.hide();
    $cartPage.show();
});

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $merchantPage.show();
    $cartPage.hide();
});

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $shade.hide();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码要有语义，比如很明显例子里有类似切换页面的逻辑，有个名字会让代码可读性提高很多&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var $merchantPage = $(&amp;quot;.merchant_page&amp;quot;);
var $cartPage = $(&amp;quot;.cart_page&amp;quot;);
var $shade = $(&amp;quot;#shade&amp;quot;);
$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, showCart);

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, showMerchant);

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, closePage);

function closePage() {
    $shade.hide();
}
function showCart() {
    $merchantPage.hide();
    $cartPage.show();
}
function showMerchant() {
    $merchantPage.show();
    $cartPage.hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后dom有个范围，有个闭包，有个chain，再加一行点睛的注释，代码就非常漂亮，主次分明了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//商品购买模块
(function($view) {
	var $merchantPage = $view.find(&amp;quot;.merchant_page&amp;quot;);
	var $cartPage = $view.find(&amp;quot;.cart_page&amp;quot;);
	var $shade = $view.find(&amp;quot;#shade&amp;quot;);

	$view
		.on(&amp;quot;click&amp;quot;, &amp;quot;#check_order&amp;quot;, showCart)
		.on(&amp;quot;click&amp;quot;, &amp;quot;.continue&amp;quot;, showMerchant)
		.on(&amp;quot;click&amp;quot;, &amp;quot;.close&amp;quot;, closePage)
	;

	function closePage() {
	    $shade.hide();
	}

	function showCart() {
	    $merchantPage.hide();
	    $cartPage.show();
	}

	function showMerchant() {
	    $merchantPage.show();
	    $cartPage.hide();
	}

})($(document.body))
&lt;/code&gt;&lt;/pre&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Javascript是否需要私有变量？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000525835&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/jerryzou&#34;&gt;JerryZou&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总所周知的是，&lt;code&gt;js&lt;/code&gt;在目前流行的标准中还不支持私有变量。我在阅读一篇讲**&lt;code&gt;js&lt;/code&gt;模块化**很不错的文章《&lt;a href=&#34;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&#34;&gt;JavaScript Module Pattern: In-Depth&lt;/a&gt;》时，看到一则谴责作者所说的模块化以及大量运用私有变量违反&lt;code&gt;js&lt;/code&gt;设计初衷的留言，留言如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Comment by &lt;strong&gt;steida&lt;/strong&gt; — March 15, 2010
Module pattern is useless JavaScript mannerism junk. It’s simple product of &lt;strong&gt;misunderstanding of JavaScript&lt;/strong&gt;. Hiding properties and methods in anonymous function does not make sense, except two reasons:&lt;br /&gt;
1). I need another variable, and no scope pollution. It’s useful for jQuery- (function($) {})(jQuery), for instance.&lt;br /&gt;
2). micro optimization, rarely useful, and only just because Internet Explorer.&lt;br /&gt;
Anybody who thinks “private in JavaScript is nice” suffer from &lt;strong&gt;false illusion of “safe code”&lt;/strong&gt;. There is no such thing in dynamic language which JavaScript really is.&lt;br /&gt;
If you want method or property as “private”, just mark it in documentation, or use underscore prefix (google closure uses it even as suffix). It’s enough to tell our code readers: “Do not call or use this, and do not except that this “private” property will work forever.&lt;br /&gt;
From: &lt;a href=&#34;http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern&#34;&gt;http://ajaxian.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实我目前的想法跟这位评论者&lt;strong&gt;steida&lt;/strong&gt;有些相似，因为我觉得&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;那些可能对安全性有要求的操作就不应该放在前端做。&lt;/li&gt;
&lt;li&gt;私有变量的确可以提供有效的抽象层次，像&lt;code&gt;js&lt;/code&gt;中一直有私有成员用的变量名用下划线开头。我认为这样足够了，而不需要用闭包来专门做出真的私有变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;各位对&lt;code&gt;js&lt;/code&gt;在中实现私有变量有什么看法？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我是下划线／POJO党。闭包私有变量不仅如题主所说无法提供所谓的安全，在断点调试的时候更是噩梦。&lt;/p&gt;

&lt;p&gt;很多编程pattern的问题是：先假设别的程序员都是傻子或者恶棍，然后试图写出针对性的防御性代码。这是病，得治。防御性代码应当是“如果事情变糟糕了，那么就崩溃”，而不是“禁止你买菜刀，防止你砍人”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【洁斯凯学僧】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/ktk14.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一己之见第三季 - 神奇的代码问题及其他</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-3/</link>
      <pubDate>Mon, 19 Jan 2015 12:37:15 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-3/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;大家写代码的时候，是不是大部分时间都费在了各种神奇的问题上&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000001664019&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zhimengren&#34;&gt;xxx织梦者&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;各种突然&lt;br /&gt;
各种抽风&lt;br /&gt;
各种莫名其妙&lt;br /&gt;
各种小错误&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;刚入门的时候非常正常，但如果已经在某个领域做了一段时间还一直维持这种状态那就有问题了。这很可能是&lt;a href=&#34;http://coolshell.cn/articles/2058.html&#34;&gt;所谓的撞大运／散弹枪编程&lt;/a&gt;的兆头。每次摆平某种抽风以后，务必总结问题和教训，做到下次从根本上防止再出现，能把你的代码写到让同事碰不到同样的问题更好（抽象、断言式编程／早崩溃、lint等等各种手段）&lt;/p&gt;

&lt;p&gt;反正我现在更多时间都花在吐槽同事的代码上，有机会面对全新领域的时候才有机会遇到所谓的抽风，莫名其妙，遇到的时候我也只有兴奋，没有无奈&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;做服务器端开发需要具备什么样的基础知识？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000001589389&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/ken_1&#34;&gt;ken&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近转服务端开发了，但是对知识的补充还是有些茫然，我个人列出一些需要补充和学习的知识，如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本的网络知识（TCP/IP , UDP , Socket等等）&lt;/li&gt;
&lt;li&gt;网络操作系统 Linux，有时候需要配置运行环境&lt;/li&gt;
&lt;li&gt;开发技术：php , python , 破儿（perl）, java（公司需要）, nodejs&lt;/li&gt;
&lt;li&gt;相关技术的积累：memcache , redis , mongodb&lt;/li&gt;
&lt;li&gt;数据库..&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我列举的可能有的是多余的，也有遗漏的，请问各位有何看法？
还有网络的基础知识是否需要更佳深入的学习，比如七层模型，子网掩码的分配计算等等&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我觉得软件开发这个行当是&lt;strong&gt;工程性&lt;/strong&gt;很强的一个行当，这类行当的学习路径和&lt;strong&gt;学术研究性&lt;/strong&gt;的几乎相反：不是先学了一堆“基础知识” “背景知识” 之类的东西再深入研究，而是先从最高级最方便的quick&amp;amp;dirty way开始，向底层细化。&lt;/p&gt;

&lt;p&gt;按我说就先挑一门语言，然后选这门语言的前三流行的框架或开源应用中任意一款，先撸个hello world，再撸个博客出来，博客做完发布做评论，做完评论做用户，做完用户再看看你以前写的代码删光从头写起。当然把博客换成其他需求也行，只要自己需要用的都行&lt;/p&gt;

&lt;p&gt;至于需要的知识，压力大了自然要缓存，模块复杂了自然要解耦，上线次数多了自然要部署要自动化，一切知识都是以解决问题为导向的。没遇到问题就空学所谓基础知识，在我看来事倍功半。就好比题主提的“服务端开发”，其中也有很多细分，做业务逻辑的，高并发的，事务的，更别说做数挖的dba的devop的等等，又或是小业务的一条龙包干，都是相当不同的技能要求。&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Backbone model设计&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002492467&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/gitbug&#34;&gt;gitbug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正在做一个对model增删改查的简单demo以学习backbone，现在的问题是model的表单不固定，需要根据model的类型动态变化。&lt;/p&gt;

&lt;p&gt;比如，添加一个人员，普通属性如 名称 邮箱 地址 都是通用的，但是当用户选择了行业（医疗、教育）等，表单需要根据这个类型进行调整。&lt;/p&gt;

&lt;p&gt;这种情况最简单的办法创建一个Person Model，把所有类型涉及到的attributes都塞到这里面，一个PersonFormView，绑定这个model，但select（行业）选择变化的时候，更新这个PersonFormView，这样的问题是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Person放了太多不该放东西&lt;/li&gt;
&lt;li&gt;view的render方法需要大量的if else逻辑用来判断类型&lt;/li&gt;
&lt;li&gt;如果行业选择增多比如10个以上就egg pain了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;按照普通的设计思路，普通用户Person应该作为基类，医疗用户，教育用户作为子类继承Person，View也类似，不同的子类负责不同的渲染。&lt;/p&gt;

&lt;p&gt;但是感觉这样子渲染的时候没思路，怎么破？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;首先整理问题，其实有两个问题：Model复杂（乃至嵌套）和View复杂（乃至嵌套）&lt;/p&gt;

&lt;p&gt;分开探讨&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Model问题&lt;/h3&gt;

&lt;p&gt;“对象部分字段结构随某个类型字段变化而变化”是个常见的需求，这种情况下，问题很可能已经超出backbone的范围，需要和后端程序、以及DB存储结构共通考虑。通常同步后端的设计思路设计Model是比较安全简便的方法。&lt;/p&gt;

&lt;p&gt;一般而言常见的解决方案有&lt;/p&gt;

&lt;h5 id=&#34;toc_7&#34;&gt;A. 单表，字段包涵每个类型可能的全部所需字段，当类型不需要某个字段时该字段留空值&lt;/h5&gt;

&lt;p&gt;这是最快最简单的方法，风险题主也提到了，类型增多，又或者是差异变大时比较痛苦，另外“不同类型的不同字段验证逻辑不同”也会造成痛苦&lt;/p&gt;

&lt;p&gt;如果类型不多，类型间字段差异不大时，可以选择这种方案，此时Backbone这层的Model不需要额外技术，照做即可&lt;/p&gt;

&lt;h5 id=&#34;toc_8&#34;&gt;B. 拆表，主表含共通字段和类型，类型相关的字段放在子表／扩展表中，每个类型一张不同的扩展表&lt;/h5&gt;

&lt;p&gt;这是扩展性最强的方法，和前一个方法恰好相反，类型少，差异不大的时候比较痛苦，而做类似“不同类型字段验证逻辑不通”之类的事情水到渠成。&lt;/p&gt;

&lt;p&gt;此时最应该有所谓的sub-model机制来对应后台的数据结构，在&lt;code&gt;parse&lt;/code&gt;或者&lt;code&gt;initialize&lt;/code&gt;的时候动手脚都应该可以实现，我没有具体实践过，建议搜索 &lt;code&gt;backbone nested model&lt;/code&gt;看看别人的做法&lt;/p&gt;

&lt;h5 id=&#34;toc_9&#34;&gt;C. 单表，一个“扩展字段”用类似JSON字符串的形式摆放所有的类型相关的数据，又或者是MongoDB类的文档数据库，直接一个字段搞定&lt;/h5&gt;

&lt;p&gt;这是前面两者的中间方案，也是最安全最不容易出大问题的，也是“罪孽”最深重的——复合字段，扩展字段是魔鬼！随着项目的迭代，它们理论上应该渐渐被修改为前两种方案，而实际上往往成了垃圾场，所有人都把东西往这儿一扔，更糟糕的是你还经常需要里面的东西，甚至对里面的内容筛选搜索&lt;/p&gt;

&lt;p&gt;但如果上述糟糕的事情没有发生，那么扩展字段是最有弹力的做法，此时backbone的model里面可以同样使扩展字段是复合值，复刻后台的数据结构，也可以用sub-model来描述扩展字段，加强结构性&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;View的问题&lt;/h3&gt;

&lt;p&gt;实现的方式大致还是划分成拆不拆子View&lt;/p&gt;

&lt;h5 id=&#34;toc_11&#34;&gt;A. 拆子View（注意不是继承）&lt;/h5&gt;

&lt;p&gt;子View的实现有很多 backbone.layoutmanager基本专门做这个，其他几乎所有基于Backbone的框架都会涉及这一块，本质就是父View管理子View的创建、销毁，子View通过某种形式和父View通信（建议向上用事件冒泡，向下用方法调用）&lt;/p&gt;

&lt;p&gt;此时，每个类型特殊的字段对应一个子View，父View根据不同类型创建不同的子View插入合适位置，在类型变换的时候销毁原有的子View重新创建&lt;/p&gt;

&lt;h5 id=&#34;toc_12&#34;&gt;B. 不拆子View&lt;/h5&gt;

&lt;p&gt;不拆子View的最大问题就是渲染复杂，其次是数据收集复杂，这里建议用模版渲染来解决这个问题，关于这个方案建议参考我之前写的&lt;a href=&#34;http://press.mcfog.wang/2013/06/dsl-style-javascript/&#34;&gt;组织大表单应用中javascript代码的一种方法&lt;/a&gt; 后半部分，这里贴一下示意图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://segmentfault.com/img/bVkCLx&#34; alt=&#34;templated-field.jpg&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;无论如何，大量if确实是需要避免的，核心思路就是根据不同类型选择不同的｛子View，子模版｝&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，不建议选择类型作为子类继承父类，详细请搜索“组合优于继承”，这里不同行业的人从领域模型的角度来说或许是“医生” is-a &amp;ldquo;人&amp;rdquo;，但实现的时候用继承会很糟糕，比如再来个需要根据不同户口类型填不同的信息之类，直接傻眼。
更合适的拆分是“人” has-a “行业信息”，“医疗行业信息” is-a “行业信息”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【霰散弹】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/ts160.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见2</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-2/</link>
      <pubDate>Sun, 11 Jan 2015 14:05:12 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-2/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;问英语在编程当中的重要程度&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000698980&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/gtg&#34;&gt;光头哥&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在与同事群友交流当中发现英文讲不出几个，但是却经常逛英文的社区，分享国外的博客和资讯。
但是我英文不会几个 好像感觉问题也不大。。。&lt;/p&gt;

&lt;p&gt;所以我不禁想问了，挖掘机技术。。。。。&lt;/p&gt;

&lt;p&gt;不对  - -&lt;/p&gt;

&lt;p&gt;是学习英语在IT行业和编程当中分别到底有多重要，你们会经常逛国外的技术网站之类的吗&lt;/p&gt;

&lt;p&gt;能举例说明最好&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;差不多的意思我就不重复了，我想说的是两点&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;关于口语&lt;/h3&gt;

&lt;p&gt;口语也非常重要！或者说，对自己的口语水平或者至少提升口语水平的决心有信心非常重要&lt;/p&gt;

&lt;p&gt;工作三年多来，我发现不少同事的共同特点就是英文口语不好或对自己的口语不好没有信心，在他们工作生活里的场景大概是这样的&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XXX，那个计算&lt;del&gt;挖掘机技术哪家强&lt;/del&gt;的方法在哪里定义的？ &lt;code&gt;@＃＊&amp;amp;&lt;/code&gt;  （？咦？听不懂）啥？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;那个@＃&amp;amp;¥＊方法的参数应该传什么?&lt;/code&gt; 哪个方法？ &lt;code&gt;就是@＃＊&amp;amp;¥类的@＃&amp;amp;¥＊方法啊&lt;/code&gt;  嗯？&lt;/li&gt;
&lt;li&gt;慢慢的这种交流不畅开始反馈到他们的代码中，牛头不对马嘴的命名、拼音命名、abcxyz命名开始出现……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实这都赶不上“英语口语”的程度，不过就是念方法名变量名和几个术语的发音标准而已罢了，但我觉得这非常影响到程序员能力的提升： &lt;strong&gt;如切如磋，如琢如磨&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;关于中文文档&lt;/h3&gt;

&lt;p&gt;我个人的体会是：越是中文资料多的技术领域，英文，或者说坚定地找英文资料越重要。总结下来中文文{档，章}的问题有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;准确程度成疑问，翻译不是万能的，甚至有时一些暧昧的表达可能都无法翻译（关于架构、编程思想的文章中可能多一些）&lt;/li&gt;
&lt;li&gt;及时性成疑问，在迭代快速的iOS、Android、NodeJS、Ruby等领域，中文译者根本跟不上技术发展的速度&lt;/li&gt;
&lt;li&gt;数量被碾轧，还难以搜索。中文的特点是表达方式多样，对搜索引擎的挑战很大，很多时候一件事情有多种非常不同的表达方式，搜索引擎无法很好的处理这些场景。&lt;/li&gt;
&lt;li&gt;中文天生逻辑性或者说和代码的相似性远远不及英文，英文的解决方案基本上缩写一下可能就是伪代码，整理一下就是实际代码，而中文描述到代码之间差距巨大&lt;/li&gt;
&lt;li&gt;英文这种不需要编译解释，不会报语法错误或是segmentation fault的语言你都掌握不了，那你凭什么能掌握好别的编程语言呢？ treat english as another programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;口碑好一些的翻译技术书籍可能还好，平时上网搜索问题或者查文档什么的&lt;strong&gt;千万不要看中文的东西&lt;/strong&gt;，多花在英文学习、理解上的每一秒，都会对你的技术成长带来莫大的好处；偷懒看中文资料的每一次，都会在将来默默地坑你一百遍啊一百遍&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;编程基础_迭代和遍历各是什么概念？二者区别和联系是什么？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002434267&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/yanwushu&#34;&gt;yanwushu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;笔者编程水平还处于初级阶段，平时使用列表的时候经常用到遍历
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //java
    for(int i = 0 ; i &amp;lt; 100 ; i ++){
        System.out.println(i);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也用到过迭代
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //java
    List&amp;lt;String&amp;gt; list = new List&amp;lt;String&amp;gt;(){&amp;quot;a&amp;quot; , &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;};
    for(String str : list){
        System.out.println(str);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是一直对迭代和遍历这两个概念理解很模糊，没有一个明确的概念。
烦请了解此问题的同志们&lt;/p&gt;

&lt;p&gt;1.对迭代和遍历下一个比较明确的定义，定义中应该包含他们各自的特性。
2.比较下他们的关系、区别（当然，如果定义足够明确，二者的差异也就自己出来了）。&lt;/p&gt;

&lt;p&gt;感激不尽&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;抠字眼的时候请多用英文&lt;/p&gt;

&lt;p&gt;遍历 ~ Traverse 访问一个集合(广义)的每个元素
迭代 ~ Iterate 反复调用同一个过程最终达成目的，这个过程如果是一个函数，那就是递归，如果是一个循环体，那就是狭义上的迭代。递归和迭代之间的关系、转换、优化等等又是另一个故事了。&lt;/p&gt;

&lt;p&gt;总之遍历是&lt;strong&gt;目的&lt;/strong&gt;，迭代是&lt;strong&gt;手段&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;谈谈你对各种编程语言的看法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000727790&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/yanwushu&#34;&gt;yanwushu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;笔者只用过java和C#，js只是看了点皮毛。对于ruby，python，go，lisp等网络上常见的语言一窍不通。并且，限制于个人能力，对java和C#的认识也并没有很深刻。&lt;/p&gt;

&lt;p&gt;想请对编程比较有功底的同志说说自己对各种语言的理解，包括他们的优劣。发表观点时，请尽量具体。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;我的看法&lt;/h2&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Lisp（系）&lt;/h3&gt;

&lt;p&gt;各种思想的老祖宗。据说越像lisp的语言越牛逼（误）
学术价值宇宙第一，实用价值较低，不明觉厉&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;可以做任何用处，但最大的用处还是写写操作系统和编译器之类的，一般人用起来只能添乱。重剑无锋，大巧不工&lt;/p&gt;

&lt;p&gt;工程性0，lisp度0，底层亲和型100%&lt;/p&gt;

&lt;p&gt;宇宙主流语言中年纪最大的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;C++&lt;/h3&gt;

&lt;p&gt;为了让一般人也有饭吃，从C衍生的变种。写C需要一群高手，但C++只要一个高手把架子搭稳，一般市民也能写代码啦。写代码能谈得上是“工程”了
问题是搭架子的人如果水平不够，或者一般市民不听那个人的，那也是一场灾难。&lt;/p&gt;

&lt;p&gt;宇宙中特性最多的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Java&lt;/h3&gt;

&lt;p&gt;为了让半瓶水也能搭出能用的架子，工程性点到满还有些溢出，派生出了邪教“设计模式真理教”“OO拯救世界教”“全家都是接口党”等
由于邪教干扰，老东家不利索，新东家坑爹等等天灾人祸，原本应当更伟大的全领域语言在桌面GUI方面只有IDE方面所向披靡，服务端方面只有企业应用半壁江山。所幸天无绝人之路，老乡的谷哥把认他为义子，放进了安卓中，顿时前景又光明了起来&lt;/p&gt;

&lt;p&gt;宇宙中最适合煮咖啡的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_12&#34;&gt;ObjC&lt;/h3&gt;

&lt;p&gt;不怎么了解，展示了肾教淫威的语言
但从语言角度来说，完全躺在一个干爹怀里是很不好的征兆&lt;/p&gt;

&lt;p&gt;宇宙中开发环境最贵的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;大法好。独树一帜的语法，巧妙的设计，文武双全。小可以随手作脚本，大可以承载大型工程。漂亮的数据结构和模块系统。
可惜版本分裂得厉害，进入3以后就没有以后了&lt;/p&gt;

&lt;p&gt;宇宙中最关心空格的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;小清新。独树另一帜的语法，另一种巧妙的设计。据说实现需求速度飞快。
magic就是那种看上去无比优雅风骚性感，实际工业开发的时候发现千人千面，难以查错难以维护的风格，ruby以此为荣，所以我觉得始终摆脱不了玩具语言
不得不提到的是gem体系引领了第一波github的狂欢&lt;/p&gt;

&lt;p&gt;宇宙中名字最高贵的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;平淡无奇的语法中蕴含了不亚于ruby的“Lisp度”或者说元编程能力，但没人能想到真正使Javascript爆发的是原因来自于他non-block的天性。这个为异步而生的语言被Node选中，成为了完美的异步服务端脚本语言。
没有namespace的JS通过“每个库把自己的依赖库重复装在自己目录里”的方式，暴力解决了依赖冲突的千古问题。然后又恰逢HTML5迎面而来，于是天时地利人和，顺势成为社区最火的语言，github trending保持占领一半位置
不过没逃过“灵活”的语言的通病：难以调试、维护、查错。需要lead programmer严格把控整体风格。&lt;/p&gt;

&lt;p&gt;宇宙中“我会JS”涵义最丰富的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;PHP&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全宇宙最好的语言&lt;/strong&gt;
主流语言中唯一主动聚焦于单个场景的语言。“克制”是PHP语言设计的不二法门，早年主要参照C和Perl，有限地借鉴perl的特性，没有让整个语言都“动态掉”，5.0后开始注重工程性，大致借鉴Java，也是一步一个脚印，慢慢地借鉴，抄一行，停下来改自己三行，融会贯通以后再继续抄。
于是现在的PHP恰好站在一个非常平衡的位置，同时兼具一定的动态能力和较高的工程性，动如Laravel让人感叹RoR再世，静如Symfony、ZF让人以为回到了Java的世界。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【封口】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m14-35.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见 新年第一期</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-1/</link>
      <pubDate>Fri, 02 Jan 2015 16:18:14 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-1/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;&lt;strong&gt;该不该从事更多项目？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002439221/a-1020000002439395&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/guotong1988&#34;&gt;郭同jet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;公司有公司的项目，虽然主要分配给我的工作A比较无聊，但也偷偷接触了一些公司的核心项目B，
没有时间搞B，这时候又有github上的项目C诱惑，&lt;/p&gt;

&lt;p&gt;好好搞B的话，也许能提高收入，但C上能学到东西。&lt;/p&gt;

&lt;p&gt;又希望早日结束A，而公司目前缺人，不让俺全职搞B。
有点想把C砍掉的意思。。C回报慢周期长&lt;/p&gt;

&lt;p&gt;“andrew ng语重心长的说，每次专心做一件事情就好了，因为你做的最大的事情远远大于次大的，例如乔布斯的苹果和皮克斯。”&lt;/p&gt;

&lt;p&gt;做一件事 one at a time，据说这句话最近很流行，纠结。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;A.&lt;/h3&gt;

&lt;p&gt;无聊项目变有趣的方法可以是流程自动化 文档化 或者重构。这些同时还为你能抽身创造客观条件&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;B.&lt;/h3&gt;

&lt;p&gt;你不可能没有时间搞B，没有时间100%只是借口，在我看来可能的原因有 你懒／老板不让你搞／或者是你本职的A没搞好等等，A没搞好的话参见上一条，创造你能抽身的条件；懒的话自己想办法解决；老板不让你搞的话，在解决了其他问题以后，找老板谈，告诉他你已经把A项目撸圆，不需要很多精力维护，B项目你已经了解了觉得很有趣，你对B项目的看法规划等等&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;C.&lt;/h3&gt;

&lt;p&gt;C能学到东西，A.B学不到是假象。C如果和公司无关，那么就只能在把AB搞漂亮之外的时间来搞，这是基本职业素养，时间自己找。 千万不要觉得只有C才能学到东西就好。我的建议是公司如果压力大的话不妨先抛开C，投入精力在改善AB两个项目，优化架构，或者是和老板沟通增加AB的资源（放慢研发周期或者加人），略微卸掉压力以后再找时间来玩C&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&lt;strong&gt;为什么国内有不少PHP程序员不喜欢THINKPHP，甚至鄙视THINKPHP？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002443290&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/xiaohuaer&#34;&gt;123456&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;为什么国内有不少PHP程序员不喜欢THINKPHP，甚至鄙视THINKPHP？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;自古文人相轻，程序员更甚，所谓的鄙视不是简单的链条或循环，而是密密麻麻的有向图，什么技术都有人鄙视&lt;/p&gt;

&lt;p&gt;我的看法是技术是有&lt;strong&gt;适用场景&lt;/strong&gt;的，什么样的业务，什么样的硬件，包括公司已有什么样的开发人员，什么样的开发人员市场上容易招聘等等各种因素都会影响到技术选择&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;就比如说“世界上最好的语言”，其古怪程度确实罄竹难书，有篇知名博文用两头都是起子的锤子来描述并不为过，但只需要“人好召，环境好配，运维简便，性能过硬” 两头都是起子的锤子也至少能在市场占有方面完爆很多竞争对手。市场是不会说谎的，用的人多的技术一定有它的优点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;作为负责技术选型的lead programmer，必须综合考虑所有的因素来选择对公司最合适的技术，而非争个人喜好或是仅靠单纯的某个方面做出选择&lt;/p&gt;

&lt;p&gt;而一旦某个项目技术选型确定，或者是你加入的是已经成熟的项目，那么吐槽已定的技术栈就没什么建设性了。这时候适应已有的思维带着镣铐跳舞才是正道，当然如果能够融合其他技术栈的思想来弥补现有技术栈的一些缺陷就更好了。&lt;/p&gt;

&lt;p&gt;说回thinkphp的话，我最近否决thinkPHP的理由和否决Laravel的大致理由是一样的：我不需要全功能的框架&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;&lt;strong&gt;如何看待敏捷开发？&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000487553&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/edagarli&#34;&gt;edagarli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;能否根据你用敏捷开发的经验简要的说下敏捷开发。&lt;/p&gt;

&lt;p&gt;谈谈你自己的理解即可。几句话，几段话，都可。&lt;/p&gt;

&lt;p&gt;我知道这不是编程语言，我只是想了解大家在项目中用到敏捷开发时候，对其的理解。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;有人说这是某种思想，有人说这是某名字和古董OS一样的实践，又有人说这是另一些实践&lt;/p&gt;

&lt;p&gt;我讨厌这种暧昧不清的词&lt;/p&gt;

&lt;p&gt;我只认为并相信&lt;br /&gt;
a)高效的团队开发有必要遵循某种方法/流程&lt;br /&gt;
b)方法/流程是随时都可以优化而且应该不断优化的&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【鄙视】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/ktk69.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>