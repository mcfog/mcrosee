<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on mc-inside </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://inside.mcfog.wang/post/index.xml/</link>
    
    
    
    <updated>Tue, 10 Feb 2015 11:18:13 CST</updated>
    
    <item>
      <title>[乱弹塔罗][翻译]第二课 主牌</title>
      <link>http://inside.mcfog.wang/2015/02/tarot-6/</link>
      <pubDate>Tue, 10 Feb 2015 11:18:13 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/tarot-6/</guid>
      <description>

&lt;p&gt;标准的塔罗牌组由78张分为两部分的牌组成，主牌／副牌（又称大／小密仪；大／小阿尔克那等）单词_arcana_是_arcanum_的复数形式，意思是“深奥的秘密”。对中世纪的炼金术士来说，阿尔克那是自然的奥秘，塔罗牌是由这些构成并能解释世间万物的秘密组成的。&lt;/p&gt;

&lt;p&gt;22张主牌是牌组的核心，每张牌象征着人类经验的某个普遍的方面，它们代表了“原型”——某种统一不变的关于人类天性中的内在部分如何作用的模式。每张主牌都有一个名字和对应的数字，有些名字直接传达了对应卡牌的含义，如“正义”、“力量”或“节制”；而有些则是体现某种生活方式的人格化的个体，比如“魔术师”或“隐者”；也有一些卡牌的名字和天文有关，比如“星辰”，“太阳”和“月亮”，他们代表了和对应天体关联的神秘力量。&lt;/p&gt;

&lt;p&gt;主牌特殊在他们抽出了深奥而复杂的反应，而维特牌组中的图案将这些深奥的象征和易于辨认的人物和场景结合，从而引人深思。这种象征虽然含蓄，却非常有效。&lt;/p&gt;

&lt;p&gt;在牌阵解读中，主牌总是带有额外的权重。当它出现的时候，你应该意识到对应的问题或状态并非暂时或平凡的。它们代表着你最基本的关怀，你的_主要_感情和动机。稍后的课程我会更详细地展示如何辨别和解释主牌在牌阵解读的时候的意味。&lt;/p&gt;

&lt;p&gt;主牌经常被视为一个组合。不同的体系被发展出来，以揭示这些卡牌如何构成得以照亮人类处境的模式。数字命理、占星术和其他各种神秘学都在这些体系中有所体现。&lt;/p&gt;

&lt;p&gt;很多读牌者将主牌看作个人内心成长旅途中的一个个不同阶段，有时被称为愚者的旅程（见练习2.2）在这样的体系中，每张主牌代表了我们达成圆满的过程中必须接纳的某种体验或品质。&lt;/p&gt;

&lt;p&gt;我们都在这自我实现的道路上旅行，除了顺利的前行，我们总是遇到各种弯路、后退乃至重新开始，我们各自路径是独特的，但其中的里程碑却是普遍一致的。22张主牌便是这自我发展的道路上的一个个标记，从最早的本能知觉（卡牌0~愚者）直到整合和圆满（卡牌21~世界）&lt;/p&gt;

&lt;p&gt;愚者的旅程看上去顺畅地从一个地方走向下一个地方，但我们的学习冒险通常不会如此有条理。我们会犯错，会跳过一些课程，会未能察觉到自己的潜能。有时我们缺乏勇气和洞察力来探索我们内心最深处。有人从未感到“隐者”的呼唤而审视自己的内心；“塔”的危机能将人从自我防卫中释放出来，有人从未体验到。很多时候我们尝试克服难关却屡屡失败，“倒吊男”带给我们的启示，放手并屈服，是其中特别困难的一课，常常需要反复面对才能完全接纳。&lt;/p&gt;

&lt;p&gt;我们的经历还经常被打乱顺序，一个人可能在困难的童年中先体验了“力量”的品质，随后才显出“战车”的控制和掌握。有的人可能在僻静的生活中先是克服了“恶魔”代表的功利主义的诱惑，而随后才面对关于关系和性的来自“恋人”的一课。&lt;/p&gt;

&lt;p&gt;主牌包含了各种不同程度和模式的经验，这些卡牌包含了成长的所有模式，它们可能发生在某段时间，也可能贯穿整个人生。我们可以说人生不过是我们灵魂发展的壮丽史诗中的一个成长篇章。&lt;/p&gt;

&lt;p&gt;主牌展示了虽然我们探索自我的模式各异，但我们终将达成圆满，只要我们坚持以其为指路明星，我们终将实现我们的真实本质，掌握“世界”的真谛&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj21s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;练习二&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;2.1 研究主牌&lt;/h3&gt;

&lt;p&gt;花一些时间看看全牌表理解如何用它。熟悉其中的关键词和动作，我会在课程中使用。不必记住或背诵任何东西。目的只是单纯地适应这些信息。&lt;/p&gt;

&lt;p&gt;现在，随意选择一张主牌，去到对应的页面。注意其中的关键词如何互相印证，最终创造出某种独特的能量或者说焦点。另外注意动作对关键词的充实。然后阅读说明部分，而“呼应”和“相反”部分一瞥而过即可，我们会在第15课中详细讨论。&lt;/p&gt;

&lt;p&gt;你可以任意重复这个过程。&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;2.2 愚者的旅程&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;/tarot/journey&#34;&gt;愚者的旅程&lt;/a&gt;是关于主牌如何象征着内心成长的阶段的说明。现在阅读一遍，它能加深你对主牌的理解，帮助你感受它们作为人类普遍处境的原型。当你继续课程的时候，记住这22张主牌如何一同工作。关于这些卡牌和他们的含义，你可能会形成自己的看法，对这些可能性保持开放。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;题图：万智【联世妙想】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/cns13.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见 VI</title>
      <link>http://inside.mcfog.wang/2015/02/ichizon-6/</link>
      <pubDate>Mon, 09 Feb 2015 18:28:43 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/ichizon-6/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;【Perl】字符串匹配：如何正确匹配出’aaaa&amp;rsquo;中的3个‘aa&amp;rsquo;模式？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002541924&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zair&#34;&gt;Zair&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一段Perl的代码，输出结果为2。然而显然在字符串&amp;rsquo;aaaa&amp;rsquo;中含有3个&amp;rsquo;aa&amp;rsquo;模式。请问如何做到3次匹配？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl
$a = &#39;aaaa&#39;;
$i ++ while $a =~ /aa/g;
print $i;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl
$a = &#39;aaaa&#39;;
$i ++ while $a =~ /a(?=a)/g;
print $i;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正则本质是状态机一个个consume字符扭转状态，捕获成功第一个aa以后相当于前两个字符都被consume掉从第三个a开始匹配了，所以原来的结果是2，这里用&lt;strong&gt;零宽断言&lt;/strong&gt;让正则去look ahead匹配模式里第二个a而不将其consume掉，从而得到3&lt;/p&gt;

&lt;p&gt;编译原理学得不好，解释得有点乱……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;图形的力量，感觉比字清楚多了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://segmentfault.com/img/bVkPsx&#34; alt=&#34;图片描述&#34; /&gt;
&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;软件工程中的耦合性和解耦合性是什么意思?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002421856&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/iamzhoug37&#34;&gt;iamzhoug37&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看《thinking in java》和《head first 设计模式》中，两本书好多次提到了“耦合性”和“解耦合性”这两个词。一直以来都是模棱两可的，搜了一下，维基百科中的解释太专业化了，我没有看懂，通俗的讲这两个词是什么意思？&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;谢谢大家的回答. 通过大家的回答, 我对于这两个概念有了初步的了解, 但是估计是我的层次不够吧, 看这两本书还是有难度,而且在实际自己编写代码的时候还是不能很好的运用设计模式的精髓, 不过我会努力的,谢谢大家&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;你正乘坐直升机游览科罗拉多大峡谷，驾驶员——他显然犯了一个错误，在吃鱼，他的午餐——突然呻吟起来，晕了过去。幸运的是，他把你留在了离地面100英尺的地方。你推断，升降杆控制总升力，所以轻轻将其压低可以让直升机平缓降向地面。然而，当你这样做时，却发现生活并非那么简单。直升机的鼻子向下，开始向左盘旋下降。突然间你发现，你驾驶的这个系统，所有的控制输入都有次级效应。压低左手的操作杆，你需要补偿性地向后移动右手柄，并踩右踏板。但这些改变中的每一项都会再次影响所有其他的控制。突然间，你在用一个让人难以置信的复杂系统玩杂耍，其中每一项改变都会影响所有其他的输入。你的工作负担异常巨大：你的手脚在不停地移动，试图平衡所有交互影响的力量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;——《程序员的修炼之道》 我认为所有程序员都应该看，而且每年都应该重新看一遍的书&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;php两种封装类的优缺点？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002544103&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/tiyee&#34;&gt;tiyee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;php很多内置的类或扩展类比较粗糙，需要人为的封装一遍，于是有了两种封装方式，
1直接继承
2内部实例化&lt;/p&gt;

&lt;p&gt;如redis类，
可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace lib
class redis extends \Redis {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace lib
class redis {
    private $_redis = null;
    public function __construct() {
        $this-&amp;gt;_redis = new \Redis()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一种方法的优点是方便，无须把所有的方法重写一遍，但是不太好统一捕捉异常，
第二种就是麻烦些，需要重写一遍所有的方法，（虽然可以用魔术方法），捕捉异常方便些。
大家用的哪种？为什么呢？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;继承&lt;/h3&gt;

&lt;p&gt;继承的特点有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔实现成本低&lt;/li&gt;
&lt;li&gt;✔调用者可以沿用原有的接口使用，学习成本低&lt;/li&gt;
&lt;li&gt;✔原有的功能无需任何代码如常工作&lt;/li&gt;

&lt;li&gt;&lt;p&gt;✘无法隐藏或改变原有的功能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;其实你_可以_这么做，就好像你确实_可以_用铁丝去捅插座眼一样&lt;/li&gt;
&lt;li&gt;改变输入、改变输出、改变行为都属于改变功能，比如原来抛的异常现在不抛了，原来return false现在变异常了，原来输入的是青椒现在变牛肉了等等&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;✘正交性弱，没有做到屏蔽父类的依赖，需要更换父类的时候显得脆弱&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见的合适的应用有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加日志记录等不影响原有逻辑的“旁路逻辑”&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加一些方法，比如原有的某一些方法a()b()c()总是连续一起调用，增加一个doABC()方法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;仅限简单的少量的方法，如果要加复杂的功能或者大量的方法，还是建议用组合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;增加一些静态／工厂方法，比如&lt;code&gt;new Redis(ip, port)&lt;/code&gt; =&amp;gt; &lt;code&gt;OurRedis::getInstance()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话说就是原有行为不变，&lt;strong&gt;is-a&lt;/strong&gt;的场景用继承。&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;组合&lt;/h3&gt;

&lt;p&gt;组合的特点有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✘实现成本略高，创建对象的过程可能会变复杂&lt;/li&gt;
&lt;li&gt;✘调用者需要理解新的接口&lt;/li&gt;
&lt;li&gt;✘需要转发才能让原有的功能工作&lt;/li&gt;
&lt;li&gt;✔很容易隐藏／屏蔽原有的部分功能&lt;/li&gt;
&lt;li&gt;✔正交性强，可以通过更换内部的对象适配不同的情况而保持外部接口不变&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;常见的合适的应用有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一切涉及改变行为的需求&lt;/li&gt;
&lt;li&gt;未来依赖会变的场景，比如redis会变成memcache，或者mysql会变mariadb之类&lt;/li&gt;
&lt;li&gt;需要屏蔽细节的场景，比如Session Cache等需求确实用到redis，但对外肯定要屏蔽“这是个redis实现的session”。否则恐龙会出现在你背后把你脑袋咬掉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一句话就是某个功能依赖另一个功能，&lt;strong&gt;use-a&lt;/strong&gt;或&lt;strong&gt;has-a&lt;/strong&gt;的场景用组合&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;偏题，predis用起来还不错，可以一试&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【接踵而至】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/rav51.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[新姿势]授人以渔：如何迅速找到靠谱的工具软件</title>
      <link>http://inside.mcfog.wang/2015/02/tech4fun-5/</link>
      <pubDate>Thu, 05 Feb 2015 17:39:37 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/tech4fun-5/</guid>
      <description>&lt;p&gt;eclipse又慢又笨？用惯WinSCP换了Mac不知所措？被Dash惯坏了想要Windows下的替代品？&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://alternativeto.net/&#34;&gt;http://alternativeto.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;alternative to XXX 正如其名的这个网站，基于用户推荐整理各种软件的替代关系，支持按平台按收费与否等等各种条件过滤，妈妈再也不担心我找不到顺手的软件啦&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/alternativeto.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;题图：万智 【琐物法师】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/som48.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[乱弹塔罗]愚者的旅程（下）</title>
      <link>http://inside.mcfog.wang/2015/02/tarot-5/</link>
      <pubDate>Wed, 04 Feb 2015 12:20:06 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/tarot-5/</guid>
      <description>

&lt;h3 id=&#34;toc_0&#34;&gt;&lt;strong&gt;Justice &amp;ldquo;正义&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj11s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者必须现在必须决定这样的视野对他个人的意义。他回顾自己的人生，梳理将他带到此时此刻的&lt;strong&gt;因果&lt;/strong&gt;关系。他肩负起过往行为的&lt;strong&gt;责任&lt;/strong&gt;，从而加以改进，正大光明地迎接未来。这种&lt;strong&gt;正义&lt;/strong&gt;(11)的呼唤必须被满足，才能将往事一笔勾销。&lt;/p&gt;

&lt;p&gt;这是一个&lt;strong&gt;抉择&lt;/strong&gt;的时刻，愚者将要做出重要的选择。他是坚持维护他的洞察，还是就此松懈回到更轻松，更无知的某种不在成长的存在？&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;&lt;strong&gt;The Hanged Man &amp;ldquo;倒吊男&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj12s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者不屈地前行，他坚持自己的观点，但很快他发现，生活并不那么容易驯服。直到有一天，他遇见了属于他个人的那个十字架——实在难以忍受的某种经历。这潮水般的挑战压制着他，知道他没有退路，只能放弃并&lt;strong&gt;松手&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;愚者一开始觉得失败和迷茫，他觉得他已经&lt;strong&gt;牺牲&lt;/strong&gt;了一切。但他从更深的层次他发现了一个令人惊讶的真相：当他放弃了挣扎和控制，一切却又开始如常工作了。敞开一切，接纳弱点之后，愚者发现来自内心那个自我奇迹般的支持和鼓励。他学到了有时应该屈服而非斗争。他感到不可思议的愉悦，开始随遇而安。&lt;/p&gt;

&lt;p&gt;愚者觉得在他&lt;strong&gt;暂停&lt;/strong&gt;在永恒的一刹那，无欲无求。他的世界被&lt;strong&gt;上下颠倒&lt;/strong&gt;，愚者此时是倒吊男(12)的化身，表面上像是殉道者，但实际上安详而宁静。&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;strong&gt;Death &amp;ldquo;死亡&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj13s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者开始&lt;strong&gt;削除&lt;/strong&gt;旧的习惯和已经厌倦的行为。他意识到生命的基础，开始去除那些非必需的东西。他将生活中过于膨胀的部分悉数舍去，迎来&lt;strong&gt;结局&lt;/strong&gt;。这过程看上去像是在死去，只有那个熟悉的自我&lt;strong&gt;死亡&lt;/strong&gt;(13)之后，全新的自我才能成长。这&lt;strong&gt;不可阻挡的变化&lt;/strong&gt;看上去好像要压垮愚者，但最终他发现死亡并非永久的状态。那只是通往一个全新的，更好的生活的一个&lt;strong&gt;过渡&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;strong&gt;Temperance &amp;ldquo;节制&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj14s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;自从拥抱“隐者”以来，愚者一直在情感的钟摆上剧烈摆动，现在，他意识到来自&lt;strong&gt;节制&lt;/strong&gt;(14)的&lt;strong&gt;平衡&lt;/strong&gt;感。他发现了真实的平衡点，体验了各种极端之后，他开始欣赏调和。愚者将他的每个方面重新&lt;strong&gt;组合&lt;/strong&gt;为一个&lt;strong&gt;健康&lt;/strong&gt;而又活力四射的整体。对比战车上的那个充满力量却显得死板的统治者，14号牌上的天使显得那么的温柔而优雅，经历了长时间的旅程，愚者终于实现了和谐的生命。&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;&lt;strong&gt;The Devil &amp;ldquo;恶魔&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj15s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;现在愚者已经得到了健康、宁静和优雅，他还需要什么？在日常生活的角度已经无法寻求更多，但愚者是勇敢的，他继续追求其存在的更深层次。很快他来到恶魔(15)面前。&lt;/p&gt;

&lt;p&gt;恶魔并非来自外部的某种邪恶、阴险的人物，他其实代表我们每个人内心都潜藏的&lt;strong&gt;无知&lt;/strong&gt;和&lt;strong&gt;绝望&lt;/strong&gt;之结。&lt;strong&gt;物质欲&lt;/strong&gt;是如此动人心弦地吸引着我们，以至于我们通常甚至没有意识到已经成为了它的奴隶。&lt;/p&gt;

&lt;p&gt;我们的体验，比起广阔无垠的精彩世界，总是极其有限的。15号牌上的情侣被链条拷牢，却对此顺从。他们不难挣脱并释放自己，但他们没有意识到&lt;strong&gt;束缚&lt;/strong&gt;的存在。他们看似恋人，但并未意识到他们的爱被限制在方寸之间。这种无知的代价便是潜藏在心底的绝望。&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;&lt;strong&gt;The Tower &amp;ldquo;塔&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj16s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者如何才能摆脱恶魔？如何才能消除其影响？他只得通过塔(16)代表的&lt;strong&gt;突变&lt;/strong&gt;来寻求&lt;strong&gt;释放&lt;/strong&gt;。高塔是我们每个人在美丽的灵魂周围构筑的名为自我的要塞，这灰色、坚硬而冰冷的要塞看似是庇护，但实则是监狱。&lt;/p&gt;

&lt;p&gt;有时只有极度的危机才能产生足以打破高塔外墙的力量。16号牌上我们看见一道闪电打在塔上，里面的住民被打飞，就要&lt;strong&gt;坠落&lt;/strong&gt;而亡。从皇冠来看，他们曾是骄傲的统治者，但现在，更强大的力量压倒了他们。&lt;/p&gt;

&lt;p&gt;愚者正需要这样一次剧烈的震荡来解放自己，幸好它带来的&lt;strong&gt;启示&lt;/strong&gt;让这份痛苦的回忆物有所值。黑暗的绝望在瞬间被一扫而空，真理的光芒再次得以照耀愚者的内心。&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;&lt;strong&gt;The Star &amp;ldquo;星辰&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj17s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者心中充满了&lt;strong&gt;宁静&lt;/strong&gt;，星辰(17)牌上的美丽场景印证着这种宁静。图中的女人赤身裸体，她的灵魂也不再有任何伪装，灿烂的星辰在晴朗的天空中闪耀着，成为&lt;strong&gt;希望&lt;/strong&gt;和&lt;strong&gt;灵感&lt;/strong&gt;的信标。&lt;/p&gt;

&lt;p&gt;愚者被赋予了希望，这完全取代了恶魔带来的负面能量，他对自己以及未来的信心已经恢复。愚者感到无比愉悦，他希望将这种愉悦&lt;strong&gt;慷慨&lt;/strong&gt;地分享给全世界。他的心灵保持开放，他的爱自由挥洒。这风暴后的宁静对愚者来说是个奇妙的时刻。&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;&lt;strong&gt;The Moon &amp;ldquo;月亮&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj18s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;什么效果败坏了这完美的宁静？愚者的下个挑战究竟在哪儿？实际上，恰恰是极致的幸福欢乐使愚者轻易地陷入月亮(18)的&lt;strong&gt;幻象&lt;/strong&gt;之中。愚者的欢愉仅仅是感官的状态，他的正向的情感并非基于清晰的神智。在这恍惚之间，愚者特别容易感受幻想、扭曲和虚伪的真理。&lt;/p&gt;

&lt;p&gt;月亮能够激发丰富的&lt;strong&gt;想象&lt;/strong&gt;，他让来自潜意识的奇思妙想得以显现，但潜藏的&lt;strong&gt;恐惧&lt;/strong&gt;和焦虑也同时显现，这样的经验可能让愚者感到&lt;strong&gt;迷惑&lt;/strong&gt;和不知所措。&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;&lt;strong&gt;The Sun &amp;ldquo;太阳&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj19s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;来自太阳(19)的清晰明亮的光芒指引了愚者的想象。阳光照亮了每个隐藏的角落，驱散了困惑和恐惧的乌云。它&lt;strong&gt;启迪&lt;/strong&gt;了愚者，使他感到并理解了世界的美好。&lt;/p&gt;

&lt;p&gt;愚者现在享受着充满生机的能量和热情，星辰的开放被进一步巩固称为全面的&lt;strong&gt;自信&lt;/strong&gt;。愚者正是19号牌上的婴孩，欢快地骑马出发迎接全新的一天。再也没有什么令人畏惧的挑战，愚者感到灿烂的&lt;strong&gt;活力&lt;/strong&gt;。他依靠自己获得了他需要的一切，于是开始参与到某个宏大的任务之中，他有能力实现他的&lt;strong&gt;伟大&lt;/strong&gt;事业。&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;&lt;strong&gt;Judgement &amp;ldquo;审判&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj20s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者就此得以&lt;strong&gt;重生&lt;/strong&gt;。他的虚伪、自私的自我被去除，闪耀的真我得以显现。他发现生活的中心是愉悦而非恐惧。&lt;/p&gt;

&lt;p&gt;愚者感到被&lt;strong&gt;赦免&lt;/strong&gt;，他知道了他真实的自我是纯洁而美好的，于是原谅了自己和他人。他为过去的错误悔过，但他理解那是由于他当时对自己的本质天性的无知。愚者觉得被净化而焕然一新，准备好重新开始。&lt;/p&gt;

&lt;p&gt;愚者应该对他的人生做出更深层次的&lt;strong&gt;审判&lt;/strong&gt;(20)的时候到了，这是属于他自己的审判之日。由于愚者已经能够正视自己的全部，他能够为自己的未来做出合适的判断。哪些事物应当珍惜而哪些应当抛弃，愚者能够做出贤明的判断。&lt;/p&gt;

&lt;p&gt;20号牌上的天使正是愚者的高我&lt;strong&gt;召唤&lt;/strong&gt;着他起来完成他的承诺。他发现了他的天职——他之所以来到这个世界的真正使命。疑惑和犹豫已经烟消云散，他准备好追寻他的梦想。&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;&lt;strong&gt;The World &amp;ldquo;世界&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj21s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者重新进入这个世界(21)，这次带着更完整的认知。他&lt;strong&gt;整合&lt;/strong&gt;了他自身蕴含的各个迥异的部分，达成了圆满。他的幸福感和&lt;strong&gt;满足感&lt;/strong&gt;到达了一个新的高度。&lt;/p&gt;

&lt;p&gt;愚者已经体验了整个人生及其内在含义。未来充满了无限的前景，愚者个人的理想和世界达成统一，他开始积极&lt;strong&gt;参与&lt;/strong&gt;其中。愚者通过共享他独特的天赋和才华来服务这个世界，并发现他心想事成。愚者的行动发自坚定的内心，因而整个世界都共同作用使其努力得到回报，他&lt;strong&gt;成就&lt;/strong&gt;无数。&lt;/p&gt;

&lt;p&gt;如今看来，愚者的旅程一点也不愚蠢。通过坚持和诚实，他重新确立了当初那驱使他出发寻求自我的本能的勇气。现在他完全清楚他在世界中的位置，一个循环就此结束了。但愚者从不停止成长，很快，他便再次走上新的旅程，去寻找更高更深的理解。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;/tarot/journey/&#34;&gt;愚者的旅程完整版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;题图：万智【世间锤炼】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m10-319.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见 第五期</title>
      <link>http://inside.mcfog.wang/2015/02/ichizon-5/</link>
      <pubDate>Mon, 02 Feb 2015 10:50:02 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/02/ichizon-5/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;学习PHP该走什么样的路线&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000484344&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/ixiqin_com&#34;&gt;西秦公子&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;是应该看传统代码还是应该看MVC框架代码？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;是应该先看手册还是应该看成品项目？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本人情况:
了解PHP的基本语法，研究过typecho的主题，了解过MVC构架。
希望可以有大神帮忙量身定制一条路线。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;不管什么风格都要看，而且别停留在看上，动手hack一下试试模仿/修改一些功能。不知道非架构代码是啥样的情况下是不容易用好/设计好架构的&lt;/li&gt;
&lt;li&gt;你学英文(这个人又来拿英文比喻了)的时候是先看字典还是先看课文？无论怎样我觉得都不可能是&lt;strong&gt;我看完了一大本课文没翻字典查单词&lt;/strong&gt;，或者是&lt;strong&gt;我看完了牛津字典但没看半篇文章&lt;/strong&gt;。看起来好像后者还合理一点，套到编程上来也是一样的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对字典(文档)，可以先按照常用三千词的程度简单翻一遍(还存在你没经验不知道什么是常用的问题)，但主要还是靠一边看成品项目一边翻文档，最好还能一边请项目作者请教，大致讲解一下。（等价于一边看课文一边查字典，然后同时老师讲解） 开源项目的话，找不到作者可以找各种博客文章&lt;/p&gt;

&lt;p&gt;技能树方面其实不管什么语言应该都是一样的：&lt;/p&gt;

&lt;p&gt;LV0 只会语法&lt;br /&gt;
LV1 明白怎么运作，能查Bug(不太复杂的)&lt;br /&gt;
LV2 有一些思路，能添加简单功能&lt;br /&gt;
LV3 能发现问题，优化局部的结构/性能，能搞定较复杂问题&lt;br /&gt;
LV4a 对架构有心得，把握宏观架构，把握整个项目的技术体系&lt;br /&gt;
LV4b 对指挥有心得，能指挥LV2 LV3的人，合理分配任务，规避技术风险&lt;br /&gt;
LV4c 对资源有心得，能从公司内/外争取LV2 LV3的人需要的各种资源&lt;br /&gt;
LV4d 对外交有心得，能搞定其他部门的人一起合作&lt;br /&gt;
LV4e 对教学有心得，能指引各种人升级加点&lt;br /&gt;
LV5 掌握若干LV4技能的基础上，知道怎么招聘和摆平其他LV4的能人&lt;/p&gt;

&lt;p&gt;看出来了吧，我就是来点LV4e这个技能的熟练度的哈哈&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;如何理解IoC（Inversion of Control）？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000755828&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/wangshuo&#34;&gt;WS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RT，如何理解IoC（Inversion of Control）？如果能写个demo解释最好了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我试着搜了一下，中文资料基本都把IoC（控制翻转）和DI（依赖注入）混为一谈，就连&lt;a href=&#34;http://stackoverflow.com/questions/3058/what-is-inversion-of-control&#34;&gt;StackOverflow上的第一位答案&lt;/a&gt;也犯了同样的问题（幸好下面有高票的反对评论，否则我的世界观都快坏掉了）&lt;/p&gt;

&lt;p&gt;控制翻转是代码复用的一种模式（注意不是设计模式）&lt;/p&gt;

&lt;p&gt;一般（非IoC）的复用，通常是用户代码调用组件（任意形式的被复用的代码，本答案中统称为组件）。也就是用户代码解决“Why it works, What to do”，组件解决“How to do”，逻辑的入口是用户代码，&lt;/p&gt;

&lt;p&gt;而控制翻转则是组件来调用用户代码，也就是组件解决“Why it works, When to do”，用户代码解决“What to do”，逻辑的入口是组件&lt;/p&gt;

&lt;p&gt;下面是除了DI之外的控制翻转的例子&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接口／虚函数  组件调用接口／虚函数，具体由用户代码实现&lt;/li&gt;
&lt;li&gt;发布订阅（事件）模式  组件触发事件，用户代码订阅事件&lt;/li&gt;
&lt;li&gt;回调  用户代码写回调，组件来调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;几乎所有能被称之为框架的东西&lt;/strong&gt;  用户代码在规定的地方实现具体业务逻辑，剩下的框架负责&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;能简单解释一下MVC吗？越简单越好&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002456846&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/dwqs&#34;&gt;不写代码的码农&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近打算学习PHP框架，才发现我以前对MVC的认识很肤浅。但是看Laravel的文档，对MVC又是云里雾里的&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;概念大家都说了，其实MVC的涵义一直在潜移默化地变化，原本CS软件的MVC和如今php ruby python讲的MVC已经有不小的区别了。甚至很可能概念早就变成MVP，只是大家习惯了MVC，指鹿为马了&lt;/p&gt;

&lt;p&gt;我觉得已实际项目来说，作3个思想实验就能大致理解MVC的本质和目标，具体三层怎么分，是三层还是四层还是两层，其实都是为了达成灵活性和可维护性的手段而已&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;更换数据库选择&lt;/h3&gt;

&lt;p&gt;数据结构不变，把数据库从mysql迁移到pgsql乃至mongodb，你的项目需要多大的变化？
理想的MVC架构应该无需修改任何业务代码(包括Model)，只需要修改配置文件，最多写个新的DBAL driver
实际情况下不同DB的能力有微妙的区别，那也应该微调Model就能解决。&lt;/p&gt;

&lt;p&gt;如果你的答案是两眼一黑：和重写一遍差不多，那么你的M层还不够独立，该写在Model的代码分散到别处了&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;手机HTML5版本&lt;/h3&gt;

&lt;p&gt;假设保持所有功能不变（都有合理自然的移动版交互），给你的站点增加手机版，你的项目需要多大的变化？
答案应该是重写一套View，然后Controller改一行&lt;code&gt;if(isMobile) use(MobileView);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果你发现Controller要改大量逻辑，甚至Model都被牵连，那你的V层不够独立&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;增加API&lt;/h3&gt;

&lt;p&gt;假设所有功能不变，给你的站点增加开放API（给第三方或移动应用使用），你的项目需要多大的变化？
答案应该是一套新的Controller 包含新的授权、和数据格式以及校验等逻辑，和一个简单的View（只输出json或xml）&lt;/p&gt;

&lt;p&gt;如果你发现Model要改，原来View里的一些东西要挪动，或者是原来写在老的Controller里的部分代码要copy一遍，那么你的C层不够独立&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【精研战技】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m15-4.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[新姿势]重构癞皮狗之洋葱皮重构法</title>
      <link>http://inside.mcfog.wang/2015/01/tech4fun-4/</link>
      <pubDate>Thu, 29 Jan 2015 19:33:28 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tech4fun-4/</guid>
      <description>&lt;p&gt;作为一只伪前端开发癞皮狗重构的mc，向来写CSS都是用“穷举法”写的。嗯，就是『标题太靠左？老板来10px margin』这样的感觉。&lt;/p&gt;

&lt;p&gt;拯救了这样的我的一款开发神器就是&lt;a href=&#34;http://alloyteam.github.io/AlloyDesigner/&#34;&gt;AlloyDesigner&lt;/a&gt;的洋葱皮功能。&lt;/p&gt;

&lt;p&gt;洋葱皮是当年flash的一个经典功能，可以让你看穿时间轴，看到前后几桢的半透明的样子。AlloyDesigner可以将重构稿导入之后，半透明覆盖在当前网页上，调整位置锁定之后，便可以愉快地进行重构了，嗯，配合chrome的开发工具，焦点在css属性上的时候可以上下直接调整数值，妈妈再也不担心我调整位置尺寸耗时费力了！&lt;/p&gt;

&lt;p&gt;AlloyDesigner有脚本部署版本，书签版本和chrome扩展版本。扩展使用方便，但会发送GA统计，敏感人群可以选用火狐扩展&lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/pixel-perfect/&#34;&gt;PixelPerfect&lt;/a&gt;，似乎也有chrome移植版。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/pxperfect.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;从此mc过上了幸福的撞大运重构生活，完。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;开始这个博客至今正好一个月，4周，12篇文章。很多事真的是只要想做就能做到呢&lt;/p&gt;

&lt;p&gt;题图：万智 【实相光闪】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/fut-43.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[乱弹塔罗]愚者的旅程（上）</title>
      <link>http://inside.mcfog.wang/2015/01/tatarot-4/</link>
      <pubDate>Wed, 28 Jan 2015 12:35:45 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tatarot-4/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;愚者的旅程是对人生旅程的某种隐喻。每张主牌代表了旅程中的某个阶段，也就是一个人在达成圆满的过程中必须接纳的体验。这22个描述都是基于每张主牌的关键词，关键词以加粗格式展示，对应卡牌的数字则在括号中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;&lt;strong&gt;The Fool &amp;ldquo;愚者&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj00s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;我们从愚者(0)开始，一张代表&lt;strong&gt;开始&lt;/strong&gt;的卡牌。愚者代表我们每个人人生旅程的开端。只有像他这样的一个单纯的灵魂才具备天真的&lt;strong&gt;信心&lt;/strong&gt;，才能承担这漫长而痛苦的旅程。&lt;/p&gt;

&lt;p&gt;在旅程的开端，愚者像一个新生儿一样稚嫩、开放而依&lt;strong&gt;本能&lt;/strong&gt;行事。愚者牌中的人物张开他的双臂，高抬着头，他准备好迎接他路上的任何东西，但他并未察觉前方的悬崖。自从出发踏上了解世界的冒险旅途，愚者注定会面对各种困难，而他对此毫不知情。&lt;/p&gt;

&lt;p&gt;愚者某种意义上脱离其他主牌之外，0是个特殊的数字，坐落于整个数字体系的中间。自诞生之时，愚者被至于他个人领域的正中央，他是一种奇怪的空白状态（正如0那样），但他充满了前进和学习的冲动。这使他看上去显得&lt;strong&gt;愚蠢&lt;/strong&gt;，是么？&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;&lt;strong&gt;The Magician &amp;ldquo;魔术师&amp;rdquo;&lt;/strong&gt; 和 &lt;strong&gt;The High Priestess &amp;ldquo;女祭司&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj01s.gif&#34; alt=&#34;&#34; /&gt;

&lt;img src=&#34;/img/tarot/s/maj02s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;出发后，愚者立刻遇见了魔术师(1)和女祭司(2)——构成被知觉世界的两股互相平衡的力量。这是物质世界的特质，每当列出经验的某个方面，我们自然会想起其反面。&lt;/p&gt;

&lt;p&gt;魔术师是正向的一侧。他代表了&lt;strong&gt;主动&lt;/strong&gt;，阳性的力量，创造力，以及我们&lt;strong&gt;有意识的知觉&lt;/strong&gt;。魔术师让我们通过&lt;strong&gt;集中&lt;/strong&gt;个人的意志和&lt;strong&gt;能量&lt;/strong&gt;来影响世界。
女祭司是负向的一侧。她代表了&lt;strong&gt;神秘的潜意识&lt;/strong&gt;，提供了灵感的源泉。女祭司是我们未曾察觉的&lt;strong&gt;潜力&lt;/strong&gt;，等待被发掘而表现出力量。&lt;/p&gt;

&lt;p&gt;这里的“正向”或“负向”并不意味着“好”或“坏”，类似的人为区分并不适用于塔罗。魔术师和女祭司在价值和重要性方面完全相等，都是不可或缺而需要平衡的。或许我们可以把负向视为我们的影子，但没有暗影我们就无法看见光明，没有潜力的沃土，我们就无法创造。&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;strong&gt;The Empress &amp;ldquo;皇后&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj03s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者渐渐成长，他渐渐开始对周围有了认知。正如多数婴儿一样，他首先意识到的是他的&lt;strong&gt;母亲&lt;/strong&gt;——那个温暖的，爱护并养育着他的女人。他也开始了解我们的大地母亲，从更广阔的意义上哺育着他。&lt;/p&gt;

&lt;p&gt;皇后代表了世界的&lt;strong&gt;自然&lt;/strong&gt;和&lt;strong&gt;感官&lt;/strong&gt;。婴儿总是乐于探索一切他接触、品尝或嗅到的东西。他的视野和听觉总是不足以满足他的感官。大地母亲环绕着他、支持着他，给予他&lt;strong&gt;富足&lt;/strong&gt;的营养，难怪他沉醉于其中。&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;strong&gt;The Emperor &amp;ldquo;皇帝&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj04s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者遇见的下一位人物是皇帝(4)牌中刻画的&lt;strong&gt;父亲&lt;/strong&gt;。他是&lt;strong&gt;结构&lt;/strong&gt;和&lt;strong&gt;权威&lt;/strong&gt;的代表。婴儿从母亲的怀抱中离开后，他了解到世界是有模式的。对象以一种可以预测的行为来回应自己，这种模式可以被探索，婴儿沉醉在发现和了解秩序之中。&lt;/p&gt;

&lt;p&gt;愚者同时接触到了&lt;strong&gt;规则&lt;/strong&gt;。他发现他的意志并不总是最高的。遵守一些必要的行为准则才能给他安宁，一些权威人士总在强调这些准则。这些限制有些令人沮丧，但通过父亲耐心的指引，他慢慢理解了他们的目的。&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;&lt;strong&gt;The Hierophant &amp;ldquo;教皇&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj05s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;终于，愚者离开他的家庭，进入更广阔的世界继续他的冒险。他发现文化中的信仰和传统，并开始接受正规的&lt;strong&gt;教育&lt;/strong&gt;。教皇(5)代表了有组织的&lt;strong&gt;信仰体系&lt;/strong&gt;，它开始围绕并影响着成长中的孩子。&lt;/p&gt;

&lt;p&gt;教皇是解读神秘学识的人。在这第5张牌上，我们看到一个宗教人物正在祈神保佑两个追随者，或许他在征兆他们入教。虽然图像本身是宗教性质的，但教皇启示代表了任何种类的启蒙。&lt;/p&gt;

&lt;p&gt;孩子开始接受社会的锻炼，慢慢成为某种文化和世界图景的一部分。他开始意识到&lt;strong&gt;群体&lt;/strong&gt;并感受到归属感。他开始享受学习社会的风俗，并表现出良好的&lt;strong&gt;服从&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;&lt;strong&gt;The Lovers &amp;ldquo;恋人&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj06s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;渐渐的，愚者面临着两个新的挑战：他体验到强烈的冲动驱使他和某人尝试&lt;strong&gt;性&lt;/strong&gt;的结合。在此之前，他总是以自我为中心，而此刻他感觉到需要达成平衡，正如恋人(6)中刻画的，发现并成为爱情伴侣的另一半，他渴望着&lt;strong&gt;关系&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;同时，愚者需要决定他的&lt;strong&gt;个人信仰&lt;/strong&gt;。他在学习和成长的过程中已经表现了足够多的服从，但有些时候，他必须坚定自己的&lt;strong&gt;价值观&lt;/strong&gt;，对自己负责。他必须开始质疑既有的观点。&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;&lt;strong&gt;The Chariot &amp;ldquo;战车&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj07s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;愚者渐渐长大成人，他拥有强烈的个性和对自己的确实掌握。通过纪律和&lt;strong&gt;意志&lt;/strong&gt;，他养成了足以让他征服环境的自我控制力。&lt;/p&gt;

&lt;p&gt;战车(7)代表了这种强力的自我意识，来自于愚者至今争取到的种种成就。在第7张牌上，我们看到一个骄傲的，发号施令的人正在&lt;strong&gt;胜利&lt;/strong&gt;地乘车而过。他对他自己以及他所见的一切具有&lt;strong&gt;明显的控制&lt;/strong&gt;，此时，愚者只想&lt;strong&gt;坚定&lt;/strong&gt;地成功下去，他感到明确的自我满足，年轻人特有的强烈自信。&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;&lt;strong&gt;Strength &amp;ldquo;力量&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj08s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;生活开始带给愚者新的挑战，其中有些让他有些痛苦和幻灭。他有多次机会利用&lt;strong&gt;力量&lt;/strong&gt;(8)的品质克服难关，他培养他的勇气和决心，试图找到在挫折和困难之中继续前进的内心。&lt;/p&gt;

&lt;p&gt;愚者同时发现了&lt;strong&gt;耐心&lt;/strong&gt;和&lt;strong&gt;忍耐&lt;/strong&gt;等沉默的品质。他意识到来自战车的意志掌控有时需要和善以及委婉处事的&lt;strong&gt;软控制&lt;/strong&gt;来缓和。渐渐的，强烈的热情重新显现，愚者觉得他掌控了包括自己在内的所有事情。&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;&lt;strong&gt;The Hermit &amp;ldquo;隐者&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj09s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;迟早有一天，愚者扪心自问：“为什么？”，他开始投入到对这古老问题的答案的&lt;strong&gt;搜寻&lt;/strong&gt;之中。并非出于单纯的好奇，而是深深地感到需要找到原因：为何明明必将经受磨难并最终死去，人们却依然活着。隐者(9)代表了这种探寻深层真实的需求。&lt;/p&gt;

&lt;p&gt;愚者开始&lt;strong&gt;反省自身&lt;/strong&gt;，尝试找到他的感受和动机。可感知的世界对他失去了吸引力，他开始避开令人烦躁的社交活动，寻求&lt;strong&gt;独处&lt;/strong&gt;的时刻。他可能还找一个老师或&lt;strong&gt;向导&lt;/strong&gt;来给予他建议和指引。&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;&lt;strong&gt;Wheel of Fortune &amp;ldquo;命运之轮&amp;rdquo;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/img/tarot/s/maj10s.gif&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;在内心搜寻许久之后，愚者开始察觉到万物是如何互相关联，他对这个世界的神奇的设计，错综复杂的模式和循环有了&lt;strong&gt;洞察&lt;/strong&gt;。命运之轮(10)标志着神秘的宇宙，其各个部分和谐统一地循环往复。当愚者窥见这世界的美丽和条理，他觉得他已经窥见了他正追求着的答案的一角。&lt;/p&gt;

&lt;p&gt;有时愚者的体验像是命中注定，一个偶遇或奇迹般发生的机会推动了改变的过程。愚者认为在一连串的事件之中，是&lt;strong&gt;命运&lt;/strong&gt;引领他来到了这个&lt;strong&gt;转折点&lt;/strong&gt;。静静独处过后，他觉得是时间开始&lt;strong&gt;移动&lt;/strong&gt;，再次出发。他的视野比以前更加宽广，将自己视为某种宏伟计划中的一部分。他的使命感恢复了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;/tarot/journey/&#34;&gt;愚者的旅程完整版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;题图：万智【探索大地】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/wwk99.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见4th</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-4/</link>
      <pubDate>Sun, 25 Jan 2015 22:01:29 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-4/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;一个优秀的前端工程师应该具备什么样的技能？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002504410?_ea=121396&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/houxiaoqiang&#34;&gt;侯志强&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一个优秀的前端工程师应该具备什么样的技能，应该从哪些方面来提高自己的专业技能还有软实力？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学力&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;迅速了解新技术，判断适用场景&lt;/li&gt;
&lt;li&gt;在合适的时机把玩新技术，迅速熟悉&lt;/li&gt;
&lt;li&gt;在合适的时机引入新技术，提高生产效率&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;解决问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;google&lt;/li&gt;
&lt;li&gt;寻找和选择合适的解决方案&lt;/li&gt;
&lt;li&gt;判断解决方案靠谱程度&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;沟通&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;说服队友放弃不靠谱方案&lt;/li&gt;
&lt;li&gt;对产品暴击&lt;/li&gt;
&lt;li&gt;对设计协商&lt;/li&gt;
&lt;li&gt;对后台撒娇&lt;/li&gt;
&lt;li&gt;带小朋友提高&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;个人效率&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;效率工具的发现与精通&lt;/li&gt;
&lt;li&gt;自己实现小工具小脚本&lt;/li&gt;
&lt;li&gt;时间管理&lt;/li&gt;
&lt;li&gt;个人知识管理&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;说穿了任何技术岗位不都一样么！&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;高效的js，jquery语句写法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000633373&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zzzddd&#34;&gt;zzzddd&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;.merchant_page&amp;quot;).hide();
    $(&amp;quot;.cart_page&amp;quot;).show();
});

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;.merchant_page&amp;quot;).show();
    $(&amp;quot;.cart_page&amp;quot;).hide();
});

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $(&amp;quot;#shade&amp;quot;).hide();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我现在的代码像这样一坨大便一样。。。&lt;/p&gt;

&lt;p&gt;请问各位如何写成比如像jquery插件那样的一些写法，比如像这样的 &lt;code&gt;function(id){$(&amp;quot;#&amp;quot;+id).on(&amp;quot;click&amp;quot;,function(){.....})}&lt;/code&gt; 等等，有什么教程或者有什么书关于这种的嘛？&lt;/p&gt;

&lt;p&gt;谢谢各位了&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;美刀是个很重的函数，尽量其缓存结果&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var $merchantPage = $(&amp;quot;.merchant_page&amp;quot;);
var $cartPage = $(&amp;quot;.cart_page&amp;quot;);
var $shade = $(&amp;quot;#shade&amp;quot;);
$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $merchantPage.hide();
    $cartPage.show();
});

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $merchantPage.show();
    $cartPage.hide();
});

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, function() {
    $shade.hide();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码要有语义，比如很明显例子里有类似切换页面的逻辑，有个名字会让代码可读性提高很多&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var $merchantPage = $(&amp;quot;.merchant_page&amp;quot;);
var $cartPage = $(&amp;quot;.cart_page&amp;quot;);
var $shade = $(&amp;quot;#shade&amp;quot;);
$(&amp;quot;#check_order&amp;quot;).on(&amp;quot;click&amp;quot;, showCart);

$(&amp;quot;.continue&amp;quot;).on(&amp;quot;click&amp;quot;, showMerchant);

$(&amp;quot;.close&amp;quot;).on(&amp;quot;click&amp;quot;, closePage);

function closePage() {
    $shade.hide();
}
function showCart() {
    $merchantPage.hide();
    $cartPage.show();
}
function showMerchant() {
    $merchantPage.show();
    $cartPage.hide();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后dom有个范围，有个闭包，有个chain，再加一行点睛的注释，代码就非常漂亮，主次分明了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//商品购买模块
(function($view) {
	var $merchantPage = $view.find(&amp;quot;.merchant_page&amp;quot;);
	var $cartPage = $view.find(&amp;quot;.cart_page&amp;quot;);
	var $shade = $view.find(&amp;quot;#shade&amp;quot;);

	$view
		.on(&amp;quot;click&amp;quot;, &amp;quot;#check_order&amp;quot;, showCart)
		.on(&amp;quot;click&amp;quot;, &amp;quot;.continue&amp;quot;, showMerchant)
		.on(&amp;quot;click&amp;quot;, &amp;quot;.close&amp;quot;, closePage)
	;

	function closePage() {
	    $shade.hide();
	}

	function showCart() {
	    $merchantPage.hide();
	    $cartPage.show();
	}

	function showMerchant() {
	    $merchantPage.show();
	    $cartPage.hide();
	}

})($(document.body))
&lt;/code&gt;&lt;/pre&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Javascript是否需要私有变量？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000525835&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/jerryzou&#34;&gt;JerryZou&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;总所周知的是，&lt;code&gt;js&lt;/code&gt;在目前流行的标准中还不支持私有变量。我在阅读一篇讲**&lt;code&gt;js&lt;/code&gt;模块化**很不错的文章《&lt;a href=&#34;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&#34;&gt;JavaScript Module Pattern: In-Depth&lt;/a&gt;》时，看到一则谴责作者所说的模块化以及大量运用私有变量违反&lt;code&gt;js&lt;/code&gt;设计初衷的留言，留言如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Comment by &lt;strong&gt;steida&lt;/strong&gt; — March 15, 2010
Module pattern is useless JavaScript mannerism junk. It’s simple product of &lt;strong&gt;misunderstanding of JavaScript&lt;/strong&gt;. Hiding properties and methods in anonymous function does not make sense, except two reasons:&lt;br /&gt;
1). I need another variable, and no scope pollution. It’s useful for jQuery- (function($) {})(jQuery), for instance.&lt;br /&gt;
2). micro optimization, rarely useful, and only just because Internet Explorer.&lt;br /&gt;
Anybody who thinks “private in JavaScript is nice” suffer from &lt;strong&gt;false illusion of “safe code”&lt;/strong&gt;. There is no such thing in dynamic language which JavaScript really is.&lt;br /&gt;
If you want method or property as “private”, just mark it in documentation, or use underscore prefix (google closure uses it even as suffix). It’s enough to tell our code readers: “Do not call or use this, and do not except that this “private” property will work forever.&lt;br /&gt;
From: &lt;a href=&#34;http://ajaxian.com/archives/a-deep-dive-and-analysis-of-the-javascript-module-pattern&#34;&gt;http://ajaxian.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实我目前的想法跟这位评论者&lt;strong&gt;steida&lt;/strong&gt;有些相似，因为我觉得&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;那些可能对安全性有要求的操作就不应该放在前端做。&lt;/li&gt;
&lt;li&gt;私有变量的确可以提供有效的抽象层次，像&lt;code&gt;js&lt;/code&gt;中一直有私有成员用的变量名用下划线开头。我认为这样足够了，而不需要用闭包来专门做出真的私有变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;各位对&lt;code&gt;js&lt;/code&gt;在中实现私有变量有什么看法？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我是下划线／POJO党。闭包私有变量不仅如题主所说无法提供所谓的安全，在断点调试的时候更是噩梦。&lt;/p&gt;

&lt;p&gt;很多编程pattern的问题是：先假设别的程序员都是傻子或者恶棍，然后试图写出针对性的防御性代码。这是病，得治。防御性代码应当是“如果事情变糟糕了，那么就崩溃”，而不是“禁止你买菜刀，防止你砍人”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【洁斯凯学僧】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/ktk14.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[新姿势]开源去中心密码生成器PasswordMaker</title>
      <link>http://inside.mcfog.wang/2015/01/tech4fun-3/</link>
      <pubDate>Thu, 22 Jan 2015 14:38:32 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tech4fun-3/</guid>
      <description>&lt;p&gt;在统一密码的方便但不设防和每个站独立密码的麻烦之中，各种密码管理解决方案出现了。关于这个小众需求，我个人无法接受这个密码生成方案是有“中心”的，无论这个中心是商业公司还是某个加密的数据文件。前者我要信赖他的生存能力，国外的不被墙能力和国内的哔—能力；而后者我要小心保护这个数据文件，用一个强密码乃至多层加密来保护它的同时，还要把它同步在不同的电脑和手机之间，这依然是方便和安全之间的悖论。&lt;/p&gt;

&lt;p&gt;今天我要推荐的&lt;a href=&#34;http://passwordmaker.org/&#34;&gt;PasswordMaker.org&lt;/a&gt;基于这样一个并不新但有效的点子：把网站名字和自己记住的一个主密码混合起来用哈希算法计算得到真正的密码。&lt;/p&gt;

&lt;p&gt;passwordmaker的密码生成流程大致如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;配置你的profile，包括密码长度，密码字符集(英文数字还是包括符号等)，哈希算法，l33t混淆等级等。如果需要在多个设备上使用，统一配置即可&lt;/li&gt;
&lt;li&gt;访问目标网站，调用passwordmaker，它会将一级域名作为生成密码的另一个要素&lt;/li&gt;
&lt;li&gt;输入你的主密码，得到生成后的密码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;过程中不涉及中心服务器或者数据库文件，所以无需担心服务器宕机，数据文件丢失，也没有引入额外的风险 —— 除了你自己的脑子之外，没有别的地方集中记录了你究竟在哪些网站有什么账号&lt;/p&gt;

&lt;p&gt;可能的麻烦和解决对策&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一站多号：passwordmaker支持额外在密码的盐中混入用户名，更简单的方法是直接把用户名打在主密码里面即可&lt;/li&gt;
&lt;li&gt;同一个站点在不同的域名下有登录界面：固定最常用的那个域名，或者手工输入域名&lt;/li&gt;
&lt;li&gt;应用的密码没有对应域名：手动输入官网地址，或者干脆就输应用名字也行&lt;/li&gt;
&lt;li&gt;希望定时修改密码： 这可能是去中心唯一的缺点……但我真没见过能坚持定时修改各种小网站密码的人，反正我没这个需求。真的必须的话，可以定时更换主密码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;国内的替身有花密，但既然都开源无中心了，也就没必要考虑国内了吧&lt;/p&gt;

&lt;p&gt;最后，&lt;strong&gt;不要用任何此类方法管理你的邮箱／网银／支付密码&lt;/strong&gt;。&lt;strong&gt;不要用任何此类方法管理你的邮箱／网银／支付密码&lt;/strong&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;题图：万智 【心灵操控】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m12-67.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[乱弹塔罗][翻译]练习一 塔罗牌介绍</title>
      <link>http://inside.mcfog.wang/2015/01/tatarot-3/</link>
      <pubDate>Mon, 19 Jan 2015 13:25:59 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tatarot-3/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;练习一&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://inside.mcfog.wang/2015/01/tatarot-2/&#34;&gt;塔罗牌介绍&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;1.1 我信么？&lt;/h3&gt;

&lt;p&gt;回想第一课中呈现的理念，简短地记下现在你有多信塔罗牌，用百分比大致如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0% = 我对塔罗牌的任何严肃用途都持怀疑态度，塔罗牌只是有趣而已&lt;/li&gt;
&lt;li&gt;100% = 我坚信塔罗牌能够带给我明确而个性化的指引&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;1.2 了解一张卡片&lt;/h3&gt;

&lt;p&gt;洗混你的塔罗牌，随意选择一张牌。仔细观察其图片一段时间，注意以下问题&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这张图片上的场景是来自怎样的一个故事？&lt;/li&gt;
&lt;li&gt;我从图片中感受到了怎样的感情？&lt;/li&gt;
&lt;li&gt;图片上的哪些细节体现了这些感情／故事？&lt;/li&gt;
&lt;li&gt;这张牌总体情绪如何？&lt;/li&gt;
&lt;li&gt;我认为这张牌可能代表些什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当你想清楚以后，检查&lt;a href=&#34;http://www.learntarot.com/cards.htm&#34;&gt;单卡解释&lt;/a&gt;中相关的说明，和你的印象做个比较。不要害怕页面上的说明和你的印象有差异，这正说明你的直觉已经开始为你提供一些独特的见解！&lt;/p&gt;

&lt;p&gt;如果你愿意，你可以任意重复这个过程。&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;1.3 我在看似“随机”的事件中扮演了什么角色？&lt;/h3&gt;

&lt;p&gt;挑选一个你经历过的，某场无妄之灾或天降之喜。重新想想，列出你实际上促成该事件发生的行为。&lt;/p&gt;

&lt;p&gt;我在公寓中的打字机和相机曾经被偷过，我并没有请小偷上门，但我&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;确实租了方便的1楼房间&lt;/li&gt;
&lt;li&gt;确实随意乱放我的东西&lt;/li&gt;
&lt;li&gt;确实在一些昂贵的东西上花了大钱&lt;/li&gt;
&lt;li&gt;并没有安装防盗报警装置&lt;/li&gt;
&lt;li&gt;当我听到异响的时候，一般不会在意&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里列出了我做的和没做的选择，有的和盗窃有关，而有的还可能引发更大的问题，它们当中并没有“错误”的选择，只是它们对盗窃的最终发生都有或多或少的影响。&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;1.4 天之声&lt;/h3&gt;

&lt;p&gt;在图书馆或者书店进行这个练习。想一个你关心的问题，闭上眼睛，默默地暗示你的内心向导你正在寻求建议，请它告诉你你需要知道的东西。&lt;/p&gt;

&lt;p&gt;静下来以后，避免意识到自己的方位，在书架之中随意漫步。信任你的内心，当你觉得合适的时候，停下你的脚步，抽出一本书打开某一页。读完这一页之后，试图将其中内容和你的问题关联起来。你或许会发现里面的内容恰巧是你寻求的答案，而如果粗看之下并无关联，可以把它视为需要解析的暗号，寻找其深层的，细微的意义 —— 意义是如字面所示地无所不在的，只是你需要花时间找到它而已。&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;1.5 梦想成真&lt;/h3&gt;

&lt;p&gt;晚上睡觉之前，取出一张二十元的钞票拿在手中，闭上眼睛，向内心请求告诉你这二十元应当如何用来帮助你或世界变得更好。（这二十元钞票象征着我们实现人生价值的意义）&lt;/p&gt;

&lt;p&gt;将钞票放在枕头下面，早上醒来后重复一次你的请求，然后带上这张钞票出门。注意如何使用它的征兆随时可能出现，当你感到猛然醒悟到的那一霎那便能认出这一征兆，小心不要错过那些细微的线索。如果第一天没有发生令你震惊的事，那么可以持续尝试一周左右的时间，给世界一个机会来响应你。不要忘了早晚的请求，你的信奉和决意很重要。&lt;/p&gt;

&lt;p&gt;稍后，想想这个过程中世界对你的暗示。生活会对你追求并坚信的东西做出回应，只是形式可能和你预想的完全不同。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;除了练习之外，顺带开始翻译单卡说明，这是本次完成的三张主牌的说明，前三张主牌说是塔罗牌的主基调也不为过。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/card/maj00/&#34;&gt;&lt;strong&gt;The Fool &amp;ldquo;愚者&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/card/maj01/&#34;&gt;&lt;strong&gt;The Magician &amp;ldquo;魔术师&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/card/maj02/&#34;&gt;&lt;strong&gt;The High Priestess &amp;ldquo;女祭司&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;题图：万智【清理书本】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m14-75.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一己之见第三季 - 神奇的代码问题及其他</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-3/</link>
      <pubDate>Mon, 19 Jan 2015 12:37:15 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-3/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;大家写代码的时候，是不是大部分时间都费在了各种神奇的问题上&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000001664019&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/zhimengren&#34;&gt;xxx织梦者&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;各种突然&lt;br /&gt;
各种抽风&lt;br /&gt;
各种莫名其妙&lt;br /&gt;
各种小错误&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;刚入门的时候非常正常，但如果已经在某个领域做了一段时间还一直维持这种状态那就有问题了。这很可能是&lt;a href=&#34;http://coolshell.cn/articles/2058.html&#34;&gt;所谓的撞大运／散弹枪编程&lt;/a&gt;的兆头。每次摆平某种抽风以后，务必总结问题和教训，做到下次从根本上防止再出现，能把你的代码写到让同事碰不到同样的问题更好（抽象、断言式编程／早崩溃、lint等等各种手段）&lt;/p&gt;

&lt;p&gt;反正我现在更多时间都花在吐槽同事的代码上，有机会面对全新领域的时候才有机会遇到所谓的抽风，莫名其妙，遇到的时候我也只有兴奋，没有无奈&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;做服务器端开发需要具备什么样的基础知识？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000001589389&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/ken_1&#34;&gt;ken&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最近转服务端开发了，但是对知识的补充还是有些茫然，我个人列出一些需要补充和学习的知识，如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;基本的网络知识（TCP/IP , UDP , Socket等等）&lt;/li&gt;
&lt;li&gt;网络操作系统 Linux，有时候需要配置运行环境&lt;/li&gt;
&lt;li&gt;开发技术：php , python , 破儿（perl）, java（公司需要）, nodejs&lt;/li&gt;
&lt;li&gt;相关技术的积累：memcache , redis , mongodb&lt;/li&gt;
&lt;li&gt;数据库..&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我列举的可能有的是多余的，也有遗漏的，请问各位有何看法？
还有网络的基础知识是否需要更佳深入的学习，比如七层模型，子网掩码的分配计算等等&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;我觉得软件开发这个行当是&lt;strong&gt;工程性&lt;/strong&gt;很强的一个行当，这类行当的学习路径和&lt;strong&gt;学术研究性&lt;/strong&gt;的几乎相反：不是先学了一堆“基础知识” “背景知识” 之类的东西再深入研究，而是先从最高级最方便的quick&amp;amp;dirty way开始，向底层细化。&lt;/p&gt;

&lt;p&gt;按我说就先挑一门语言，然后选这门语言的前三流行的框架或开源应用中任意一款，先撸个hello world，再撸个博客出来，博客做完发布做评论，做完评论做用户，做完用户再看看你以前写的代码删光从头写起。当然把博客换成其他需求也行，只要自己需要用的都行&lt;/p&gt;

&lt;p&gt;至于需要的知识，压力大了自然要缓存，模块复杂了自然要解耦，上线次数多了自然要部署要自动化，一切知识都是以解决问题为导向的。没遇到问题就空学所谓基础知识，在我看来事倍功半。就好比题主提的“服务端开发”，其中也有很多细分，做业务逻辑的，高并发的，事务的，更别说做数挖的dba的devop的等等，又或是小业务的一条龙包干，都是相当不同的技能要求。&lt;/p&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Backbone model设计&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002492467&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/gitbug&#34;&gt;gitbug&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;正在做一个对model增删改查的简单demo以学习backbone，现在的问题是model的表单不固定，需要根据model的类型动态变化。&lt;/p&gt;

&lt;p&gt;比如，添加一个人员，普通属性如 名称 邮箱 地址 都是通用的，但是当用户选择了行业（医疗、教育）等，表单需要根据这个类型进行调整。&lt;/p&gt;

&lt;p&gt;这种情况最简单的办法创建一个Person Model，把所有类型涉及到的attributes都塞到这里面，一个PersonFormView，绑定这个model，但select（行业）选择变化的时候，更新这个PersonFormView，这样的问题是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Person放了太多不该放东西&lt;/li&gt;
&lt;li&gt;view的render方法需要大量的if else逻辑用来判断类型&lt;/li&gt;
&lt;li&gt;如果行业选择增多比如10个以上就egg pain了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;按照普通的设计思路，普通用户Person应该作为基类，医疗用户，教育用户作为子类继承Person，View也类似，不同的子类负责不同的渲染。&lt;/p&gt;

&lt;p&gt;但是感觉这样子渲染的时候没思路，怎么破？&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;首先整理问题，其实有两个问题：Model复杂（乃至嵌套）和View复杂（乃至嵌套）&lt;/p&gt;

&lt;p&gt;分开探讨&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Model问题&lt;/h3&gt;

&lt;p&gt;“对象部分字段结构随某个类型字段变化而变化”是个常见的需求，这种情况下，问题很可能已经超出backbone的范围，需要和后端程序、以及DB存储结构共通考虑。通常同步后端的设计思路设计Model是比较安全简便的方法。&lt;/p&gt;

&lt;p&gt;一般而言常见的解决方案有&lt;/p&gt;

&lt;h5 id=&#34;toc_7&#34;&gt;A. 单表，字段包涵每个类型可能的全部所需字段，当类型不需要某个字段时该字段留空值&lt;/h5&gt;

&lt;p&gt;这是最快最简单的方法，风险题主也提到了，类型增多，又或者是差异变大时比较痛苦，另外“不同类型的不同字段验证逻辑不同”也会造成痛苦&lt;/p&gt;

&lt;p&gt;如果类型不多，类型间字段差异不大时，可以选择这种方案，此时Backbone这层的Model不需要额外技术，照做即可&lt;/p&gt;

&lt;h5 id=&#34;toc_8&#34;&gt;B. 拆表，主表含共通字段和类型，类型相关的字段放在子表／扩展表中，每个类型一张不同的扩展表&lt;/h5&gt;

&lt;p&gt;这是扩展性最强的方法，和前一个方法恰好相反，类型少，差异不大的时候比较痛苦，而做类似“不同类型字段验证逻辑不通”之类的事情水到渠成。&lt;/p&gt;

&lt;p&gt;此时最应该有所谓的sub-model机制来对应后台的数据结构，在&lt;code&gt;parse&lt;/code&gt;或者&lt;code&gt;initialize&lt;/code&gt;的时候动手脚都应该可以实现，我没有具体实践过，建议搜索 &lt;code&gt;backbone nested model&lt;/code&gt;看看别人的做法&lt;/p&gt;

&lt;h5 id=&#34;toc_9&#34;&gt;C. 单表，一个“扩展字段”用类似JSON字符串的形式摆放所有的类型相关的数据，又或者是MongoDB类的文档数据库，直接一个字段搞定&lt;/h5&gt;

&lt;p&gt;这是前面两者的中间方案，也是最安全最不容易出大问题的，也是“罪孽”最深重的——复合字段，扩展字段是魔鬼！随着项目的迭代，它们理论上应该渐渐被修改为前两种方案，而实际上往往成了垃圾场，所有人都把东西往这儿一扔，更糟糕的是你还经常需要里面的东西，甚至对里面的内容筛选搜索&lt;/p&gt;

&lt;p&gt;但如果上述糟糕的事情没有发生，那么扩展字段是最有弹力的做法，此时backbone的model里面可以同样使扩展字段是复合值，复刻后台的数据结构，也可以用sub-model来描述扩展字段，加强结构性&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;View的问题&lt;/h3&gt;

&lt;p&gt;实现的方式大致还是划分成拆不拆子View&lt;/p&gt;

&lt;h5 id=&#34;toc_11&#34;&gt;A. 拆子View（注意不是继承）&lt;/h5&gt;

&lt;p&gt;子View的实现有很多 backbone.layoutmanager基本专门做这个，其他几乎所有基于Backbone的框架都会涉及这一块，本质就是父View管理子View的创建、销毁，子View通过某种形式和父View通信（建议向上用事件冒泡，向下用方法调用）&lt;/p&gt;

&lt;p&gt;此时，每个类型特殊的字段对应一个子View，父View根据不同类型创建不同的子View插入合适位置，在类型变换的时候销毁原有的子View重新创建&lt;/p&gt;

&lt;h5 id=&#34;toc_12&#34;&gt;B. 不拆子View&lt;/h5&gt;

&lt;p&gt;不拆子View的最大问题就是渲染复杂，其次是数据收集复杂，这里建议用模版渲染来解决这个问题，关于这个方案建议参考我之前写的&lt;a href=&#34;http://press.mcfog.wang/2013/06/dsl-style-javascript/&#34;&gt;组织大表单应用中javascript代码的一种方法&lt;/a&gt; 后半部分，这里贴一下示意图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://segmentfault.com/img/bVkCLx&#34; alt=&#34;templated-field.jpg&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;无论如何，大量if确实是需要避免的，核心思路就是根据不同类型选择不同的｛子View，子模版｝&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最后，不建议选择类型作为子类继承父类，详细请搜索“组合优于继承”，这里不同行业的人从领域模型的角度来说或许是“医生” is-a &amp;ldquo;人&amp;rdquo;，但实现的时候用继承会很糟糕，比如再来个需要根据不同户口类型填不同的信息之类，直接傻眼。
更合适的拆分是“人” has-a “行业信息”，“医疗行业信息” is-a “行业信息”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【霰散弹】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/ts160.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[新姿势]前端革命，革了再革：WebPack</title>
      <link>http://inside.mcfog.wang/2015/01/tech4fun-2/</link>
      <pubDate>Fri, 16 Jan 2015 11:30:42 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tech4fun-2/</guid>
      <description>&lt;p&gt;时光回溯到2009年，CommonJS规范和NodeJS都还在襁褓之中，离Bower诞生还有三年时间，Ruby还统治着github，CoffeeScript在年末提交了第一个commit……&lt;/p&gt;

&lt;p&gt;备受加载顺序，依赖关系折磨的前端开发，开始站起来试图解决日益复杂的前端开发的种种问题，RequireJS降临了。如果说NodeJS吹响了JS全栈革命的号角，那么同时发生的前端模块化革命便是RequireJS的历史使命。&lt;/p&gt;

&lt;p&gt;五年过去了，RequireJS战胜了同级生LabJS，带起了中国小伙伴SeaJS。他完美地引领了前端模块化的革命，但今天看来，它有些过时了：它重浏览器端，轻打包编译，没有及时跟进包管理体系，almond没有成为标配而只是周边，配置晦涩……诞生太早的RequireJS，虽然一度成为了前端模块化的某种程度上的事实标准，但难掩其缺点。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;五年间，NodeJS成为了服务端以及脚本工具的一代翘楚，NPM的成功让大家意识到一个集中式的依赖／包管理体系的重要性，Bower应运而生，还有试图将CMD和NPM包带到前端领域，统一前后端包格式的Browserify等等，大量的前端工具爆发式地出现，WebPack是其中的(又)一款模块打包工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/webpack.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;webpack的优势一言难尽，相比其他竞争者，他的好处有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;模块来源广泛，支持包括npm/bower等等的各种主流模块安装／依赖解决方案&lt;/li&gt;
&lt;li&gt;模块规范支持全面，amd/cmd以及shimming等一应具全&lt;/li&gt;
&lt;li&gt;浏览器端足迹小，移动端友好，却对热加载乃至热替换有很好的支持&lt;/li&gt;
&lt;li&gt;插件机制完善，实现本身实现同样模块化，容易扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但其最大的特点是“用着舒服，不折腾”，这是一款工具最难能可贵的优点。&lt;/p&gt;

&lt;p&gt;webpack官网&lt;br /&gt;
&lt;a href=&#34;http://webpack.github.io/&#34;&gt;http://webpack.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我的前端技术栈scaffold （bower+webpack+less+gulp）&lt;br /&gt;
&lt;a href=&#34;https://github.com/mcfog/glimmervoid&#34;&gt;https://github.com/mcfog/glimmervoid&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[乱弹塔罗][翻译]第一课 塔罗牌介绍</title>
      <link>http://inside.mcfog.wang/2015/01/tatarot-2/</link>
      <pubDate>Wed, 14 Jan 2015 11:30:00 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tatarot-2/</guid>
      <description>&lt;p&gt;多年前，我告诉我兄弟我在研究塔罗牌，他说“一副纸牌怎么可能告诉你哪怕任何一点有用的东西?” 我笑了，他的回复代表了大众对塔罗牌的看法。而我也同样对塔罗牌抱着怀疑，但后来我发现它确实可以以一种不同的角度帮你察觉、理解和面对人生中的挑战。在这篇介绍中，我会尝试解释其中原因。&lt;/p&gt;

&lt;p&gt;塔罗牌的起源是个谜。在十五世纪，塔罗牌作为一种纸牌游戏在意大利流行。富人们钟情于漂亮的纸牌，其中有一些得以存续至今。1450年代前后的&lt;a href=&#34;http://en.wikipedia.org/wiki/Visconti-Sforza_tarot_deck&#34;&gt;Visconti-Sforza塔罗牌&lt;/a&gt;就是其中最早最完整的塔罗牌组之一。&lt;/p&gt;

&lt;p&gt;到了十八十九世纪，部分颇具影响力的神秘学家发现了这种纸牌。他们被塔罗牌吸引，认为牌面上的图像蕴含的强大力量远非普通游戏可比。他们将塔罗牌与埃及神话、赫耳墨斯主义、卡巴拉、炼金术以及其他各种神秘学体系联系起来。这种潮流一直持续到二十世纪上半叶，塔罗牌开始被纳入一些秘密结社的实践之中，其中包含了黄金黎明协会。&lt;/p&gt;

&lt;p&gt;即使塔罗牌源自于传统迷信，近年来对塔罗牌的研究和兴趣不断延伸到大量不同的领域。新的牌组也不断被创造，诸如印第安塔罗、草药塔罗、巨龙塔罗、浮世绘塔罗等等各种不同的塔罗印证了塔罗牌的发展。&lt;/p&gt;

&lt;p&gt;塔罗牌通常被视为占卜工具。传统的塔罗解读由一个了解如何解读卡牌的
读牌者和一个探求某些个人问题的答案的求卦人进行。求卦人洗混牌组并切牌后，读牌者将选定的牌按照被陈为“牌阵”的模式放置。牌阵中的每个位置以及每张牌都有各自的含义，读牌者结合这些含义为求卦人的问题提供解答。&lt;/p&gt;

&lt;p&gt;这样一个简单的过程却一直被有意夸大，我们经常在电影中见到类似的场景：一个破旧的小房间中，一个老婆婆坐在阴影中给一个紧张的女孩占卜。老婆婆用她布满皱纹的手翻开一张不详的&lt;strong&gt;Death &amp;ldquo;死亡&amp;rdquo;&lt;/strong&gt;，女孩瘫倒在椅子中，惊恐地看着这代表迫近她的灾厄的牌。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/maj13s.gif&#34; alt=&#34;Death&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;这种阴暗的印象至今伴随着塔罗牌，一些迷信者将塔罗牌视为禁忌，而一些科学机构将塔罗牌视为非理性的象征，视为愚昧无知的过去的遗物。让我们抛弃这些成见，将塔罗牌视作塔罗牌本身 —— 一组带图画的纸牌。那么问题变成了：塔罗牌到底有什么用？&lt;/p&gt;

&lt;p&gt;答案关乎潜意识——平日难以察觉，却潜藏于每个人心底的深层记忆和意识。即使多数时间我们忽视潜意识的活动，它仍然深深地影响我们的作为。弗洛伊德在他的文字中，强调了潜意识非理性而原始的一面，他认为我们最不可接受的那些欲望和冲动是来自潜意识。同时代的卡尔·荣格则强调潜意识中积极、创造性的一面，他试图展示潜意识中的一些共同部分接触到了万物的本质。&lt;/p&gt;

&lt;p&gt;我们可能永远无法了解潜意识的完整范围和全部力量，但探索其奥秘的方法确实存在。很多技术为此目的诞生，诸如心理治疗、解梦和冥想等，而塔罗牌是另一种类似的工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/s5s.gif&#34; alt=&#34;Five of Swords&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;凝视塔罗牌中的一张&lt;strong&gt;Five of Swords &amp;ldquo;宝剑之五&amp;rdquo;&lt;/strong&gt;，这张牌展示了拿着三把宝剑的一个男人看着远方的另外两人，而地上有另两支宝剑。我看到这张牌的时候，便会尝试围绕这张图片展开想象：我看到了一个似乎打了胜仗的男人满足地笑着，他拥有所有宝剑，看上去喜气洋洋的，而另外两人则垂头丧气，似乎是被打败了。&lt;/p&gt;

&lt;p&gt;我刚在进行的是一次开放性的想象，并将其描述成一个故事，对我来说，我看到的明显就是这个，唯一的对图片上的场景的解释。但实际上，其他人很可能有完全不同的故事，比如这个男人正在收拾，他招呼其他两人帮忙捡起宝剑，却被另两人拒绝了；又或者是另外两人原本在战斗，而这个男人说服了他们放下武器。&lt;/p&gt;

&lt;p&gt;关键点在于，在所有可能的各种故事中，我为何偏偏选择了我自己的那个版本？将自己潜意识中的部分投射到环境中的对象上是人类的天性，我们总是透过以我们自身状态构成的透镜来观察世间万物。心理治疗师很早就发现了这种倾向，并创造了辅助这种过程的工具，诸如著名的罗夏克墨渍测验。&lt;/p&gt;

&lt;p&gt;这种投射过程是塔罗牌有价值的原因之一。牌上的景象和图案有助于我们开发潜意识，这是塔罗牌的个性的一面。塔罗牌也有反应所有人共性的另一面：作为人类，我们有着一些共通的诉求和体验，塔罗牌上的图片刻画了这些共通的情感，将它们的共性提取出来。塔罗牌代表了人性的原型，因此人们倾向于对牌表现出相似的反应。经过一代代的演化，塔罗牌已经成为人类思想和情感最基本的模式的一个集合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/maj03s.gif&#34; alt=&#34;The Empress&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;凝视这张&lt;strong&gt;The Empress &amp;ldquo;皇后&amp;rdquo;&lt;/strong&gt;，她代表了母性的力量，富足的生活。注意图片是如何体现出这种充裕、华丽的感觉的：她穿着华美长袍，坐在柔软、豪华的垫子上。我们感受到了慷慨和充满感性的自然。&lt;/p&gt;

&lt;p&gt;塔罗牌的力量源自个性和普遍性的结合。你以你的视角来看每张牌，但同时，这些牌又来自于他人认为有价值的那些理解。塔罗牌是将你独一无二的意识中隐藏部分映射出来的一面镜子。&lt;/p&gt;

&lt;p&gt;当我们进行塔罗解读时，我们通过洗牌、切牌来选择了一些牌，这看上去是随机的，我们却认为这些牌是有意义的。选择我们应当看到的牌是塔罗解读的基本要点，而常理似乎告诉我们随便选的几张牌不可能有任何的特殊含义，不是么？&lt;/p&gt;

&lt;p&gt;为了回答这个问题，让我们仔细审视“随机性”。通常我们说一个事件是随机的，是指它是若干机械性力量的偶然互动的结果，在若干相同可能的结果中，某一个发生了，没有特别的原因和意味。&lt;/p&gt;

&lt;p&gt;这涉及到两个关键点：无意识的机械力量和无特别含义的结果。首先，没有任何一次塔罗解读是无意识的结果。它是一连串有意为之的结果，首先我们决定研究塔罗牌，我们购买了一套牌组，学习如何使用它，然后我们在一个特定的时间按照某种方式洗牌、切牌，最后我们用自己的感觉来解释这些牌。&lt;/p&gt;

&lt;p&gt;这每一个步骤我们都主动参与，那我们为何会认为这结果是随机，是“机械性力量的偶然互动的结果”？ 可能因为我们无法解释我们的主观意识如何影响了结果，我们认为我们选择的这些牌并非故意为之，因而我们称之为随机。那么实际上，是否有某种与我们潜意识之中的力量关联的未知机制存在并左右其结果？我们的内在力量能否通过某些我们并不完全理解的方式影响外部的事件？我把这些疑问留给你自行解读。&lt;/p&gt;

&lt;p&gt;随机事件的另一个特征是其并不具备意义。我掷骰子掷出一个六，但这并没有内在意义，我很有可能掷出的是一而非六，但这和掷出六来并没有什么区别。我们并不总能发现事物的意义，但实际上，或许所有事情都或多或少有其意义。&lt;/p&gt;

&lt;p&gt;多年前的一场派对上，我突然捡起地上的一个骰子，我非常确信我会用这个骰子连续掷出每个数字。我开始掷骰子的同时，派对的喧嚣渐渐淡去，我不断掷出不重复的数字，越来越兴奋，直到最后一掷成功以后才回过神来。我回到自己的位置上，无法理解究竟发生了什么。&lt;/p&gt;

&lt;p&gt;某种角度来说，这六次掷骰是互相独立的随机事件，然而另一方面，它们是很有意义的。即使旁观者可能不能认同，但我的内心告诉我这是很有意义的。当时，它成了我理解精神和物质的奇妙互动的一节课，而今天，我得知它还有另外一层意义——25年后，这成了本次课程的一个绝佳例证！&lt;/p&gt;

&lt;p&gt;意义是内在与外在真实交界处的神秘性质。树木、歌谣乃至垃圾，任何事物都具备某些信息，但只有我们开放内心去体会它们时才能察觉到它。塔罗牌丰富的图像和联系携带了大量的信息。更为重要的是，我们真诚地希望能发现生活中深层的真理，并将这希望寄托于塔罗牌，塔罗牌因而能够表达出意义。通过这种形式来追寻意义，我们尊重它的本质并试图揭示它。&lt;/p&gt;

&lt;p&gt;如果塔罗牌解读中存在意义，那么其究竟来自何处？我相信埋藏于我们自身内心的某些部分能够察觉到上天的启示，从而带来塔罗解读的意义。这是潜意识的一种体现，同时也能扮演一个最了解我们自己的明智的顾问。它理解我们的诉求，并引导我们找到应该前进的方向。有的人把这位顾问称为灵魂，超意识或高我(Higher Self)。这里我称之为内心向导，这描述了它在我们和塔罗牌交互中起到的作用。&lt;/p&gt;

&lt;p&gt;内心向导作为我们每个人心中意义的源泉，作为每个人本身的一部分，总是陪伴着你。你无法摧毁它，但你会忽略它。当你向塔罗牌寻求答案时，你向你的内心向导发出信号，表示你希望接受它的智慧。这行为本身便成为一种信念，让你得以发现内心向导，接受其指导。&lt;/p&gt;

&lt;p&gt;我们的天性原本依赖于内心向导的智慧，只是不知怎地渐渐忘记了如何找到它。于是我们开始信任我们的主观意识，而忘记关注更深层次的东西。我们的表层意识确实聪明，但可惜其并不具备我们所需的，让我们每天做出恰当选择的，完整的认知。&lt;/p&gt;

&lt;p&gt;当我们以表层意识驱动生活，我们发现事情总是偶然、莫名地发生，生活似乎缺乏目的，而我们并不清楚我们是怎样一种存在，又究竟需要什么东西，这令我们十分痛苦。而当我们掌握了如何找到并依赖我们的内心向导之后，生活会变得不同：我们的内在追求和表层意识保持一致，从而带来坚定和安宁。我们的努力变得愉悦，我们更清楚地了解如何整合生活中支离破碎的各种事情来实现我们的天命。&lt;/p&gt;

&lt;p&gt;我选择了塔罗牌，因为它是我能找到的用来探寻我们内心向导的耳语声的最佳工具。在解读中，塔罗牌的概念、图像和情感融合成了来自我内心向导的消息，或许我无法证明这不是我的妄想，我只能相信我的经验，并等着看看后来事情如何发展。&lt;/p&gt;

&lt;p&gt;其实探寻内心向导并非必需塔罗牌不可，塔罗牌能起到的作用和小象丹波的魔法羽毛是一样的。在迪士尼电影《小飞象》中，小象丹波无法相信自己能飞，于是他用鼻子抓紧一根魔法羽毛，坚信这这根羽毛赋予他飞行的能力。最终当羽毛被吹走，丹波终于凭自己的力量飞了起来。&lt;/p&gt;

&lt;p&gt;塔罗牌或许也能助你飞行，直到你发现凭自己的力量其实也能找到你的内心向导。目前来说，不用在意这如何得以实现，找来套牌，继续这个系列的课程和联系，看看你能否体验到某些惊奇。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;翻译自我了解塔罗的入门站点 &lt;a href=&#34;http://www.learntarot.com/less1.htm&#34;&gt;http://www.learntarot.com/less1.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网上也有各种翻译版本，但我觉得并不够好，大多也没有完整翻译全部内容，那么正好借此机会慢慢自己将其翻译并温习一遍也是不错的。&lt;/p&gt;

&lt;p&gt;第一课可能是最重要也是最长的一篇，内容太多因而我把配套的练习留到下次了&lt;/p&gt;

&lt;p&gt;题图：迪斯尼《小飞象》海报
&lt;img src=&#34;/img/2015-q1/dumbo.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mcfog的一己之见2</title>
      <link>http://inside.mcfog.wang/2015/01/ichizon-2/</link>
      <pubDate>Sun, 11 Jan 2015 14:05:12 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/ichizon-2/</guid>
      <description>

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;问英语在编程当中的重要程度&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000698980&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/gtg&#34;&gt;光头哥&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在与同事群友交流当中发现英文讲不出几个，但是却经常逛英文的社区，分享国外的博客和资讯。
但是我英文不会几个 好像感觉问题也不大。。。&lt;/p&gt;

&lt;p&gt;所以我不禁想问了，挖掘机技术。。。。。&lt;/p&gt;

&lt;p&gt;不对  - -&lt;/p&gt;

&lt;p&gt;是学习英语在IT行业和编程当中分别到底有多重要，你们会经常逛国外的技术网站之类的吗&lt;/p&gt;

&lt;p&gt;能举例说明最好&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;差不多的意思我就不重复了，我想说的是两点&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;关于口语&lt;/h3&gt;

&lt;p&gt;口语也非常重要！或者说，对自己的口语水平或者至少提升口语水平的决心有信心非常重要&lt;/p&gt;

&lt;p&gt;工作三年多来，我发现不少同事的共同特点就是英文口语不好或对自己的口语不好没有信心，在他们工作生活里的场景大概是这样的&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;XXX，那个计算&lt;del&gt;挖掘机技术哪家强&lt;/del&gt;的方法在哪里定义的？ &lt;code&gt;@＃＊&amp;amp;&lt;/code&gt;  （？咦？听不懂）啥？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;那个@＃&amp;amp;¥＊方法的参数应该传什么?&lt;/code&gt; 哪个方法？ &lt;code&gt;就是@＃＊&amp;amp;¥类的@＃&amp;amp;¥＊方法啊&lt;/code&gt;  嗯？&lt;/li&gt;
&lt;li&gt;慢慢的这种交流不畅开始反馈到他们的代码中，牛头不对马嘴的命名、拼音命名、abcxyz命名开始出现……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实这都赶不上“英语口语”的程度，不过就是念方法名变量名和几个术语的发音标准而已罢了，但我觉得这非常影响到程序员能力的提升： &lt;strong&gt;如切如磋，如琢如磨&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;关于中文文档&lt;/h3&gt;

&lt;p&gt;我个人的体会是：越是中文资料多的技术领域，英文，或者说坚定地找英文资料越重要。总结下来中文文{档，章}的问题有&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;准确程度成疑问，翻译不是万能的，甚至有时一些暧昧的表达可能都无法翻译（关于架构、编程思想的文章中可能多一些）&lt;/li&gt;
&lt;li&gt;及时性成疑问，在迭代快速的iOS、Android、NodeJS、Ruby等领域，中文译者根本跟不上技术发展的速度&lt;/li&gt;
&lt;li&gt;数量被碾轧，还难以搜索。中文的特点是表达方式多样，对搜索引擎的挑战很大，很多时候一件事情有多种非常不同的表达方式，搜索引擎无法很好的处理这些场景。&lt;/li&gt;
&lt;li&gt;中文天生逻辑性或者说和代码的相似性远远不及英文，英文的解决方案基本上缩写一下可能就是伪代码，整理一下就是实际代码，而中文描述到代码之间差距巨大&lt;/li&gt;
&lt;li&gt;英文这种不需要编译解释，不会报语法错误或是segmentation fault的语言你都掌握不了，那你凭什么能掌握好别的编程语言呢？ treat english as another programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;口碑好一些的翻译技术书籍可能还好，平时上网搜索问题或者查文档什么的&lt;strong&gt;千万不要看中文的东西&lt;/strong&gt;，多花在英文学习、理解上的每一秒，都会对你的技术成长带来莫大的好处；偷懒看中文资料的每一次，都会在将来默默地坑你一百遍啊一百遍&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;编程基础_迭代和遍历各是什么概念？二者区别和联系是什么？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000002434267&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/yanwushu&#34;&gt;yanwushu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;笔者编程水平还处于初级阶段，平时使用列表的时候经常用到遍历
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //java
    for(int i = 0 ; i &amp;lt; 100 ; i ++){
        System.out.println(i);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也用到过迭代
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    //java
    List&amp;lt;String&amp;gt; list = new List&amp;lt;String&amp;gt;(){&amp;quot;a&amp;quot; , &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;};
    for(String str : list){
        System.out.println(str);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是一直对迭代和遍历这两个概念理解很模糊，没有一个明确的概念。
烦请了解此问题的同志们&lt;/p&gt;

&lt;p&gt;1.对迭代和遍历下一个比较明确的定义，定义中应该包含他们各自的特性。
2.比较下他们的关系、区别（当然，如果定义足够明确，二者的差异也就自己出来了）。&lt;/p&gt;

&lt;p&gt;感激不尽&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;我的看法&lt;/h2&gt;

&lt;p&gt;抠字眼的时候请多用英文&lt;/p&gt;

&lt;p&gt;遍历 ~ Traverse 访问一个集合(广义)的每个元素
迭代 ~ Iterate 反复调用同一个过程最终达成目的，这个过程如果是一个函数，那就是递归，如果是一个循环体，那就是狭义上的迭代。递归和迭代之间的关系、转换、优化等等又是另一个故事了。&lt;/p&gt;

&lt;p&gt;总之遍历是&lt;strong&gt;目的&lt;/strong&gt;，迭代是&lt;strong&gt;手段&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;!--================================!--&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;谈谈你对各种编程语言的看法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://segmentfault.com/q/1010000000727790&#34;&gt;问题&lt;/a&gt; by &lt;a href=&#34;http://segmentfault.com/u/yanwushu&#34;&gt;yanwushu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;笔者只用过java和C#，js只是看了点皮毛。对于ruby，python，go，lisp等网络上常见的语言一窍不通。并且，限制于个人能力，对java和C#的认识也并没有很深刻。&lt;/p&gt;

&lt;p&gt;想请对编程比较有功底的同志说说自己对各种语言的理解，包括他们的优劣。发表观点时，请尽量具体。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;我的看法&lt;/h2&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Lisp（系）&lt;/h3&gt;

&lt;p&gt;各种思想的老祖宗。据说越像lisp的语言越牛逼（误）
学术价值宇宙第一，实用价值较低，不明觉厉&lt;/p&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;可以做任何用处，但最大的用处还是写写操作系统和编译器之类的，一般人用起来只能添乱。重剑无锋，大巧不工&lt;/p&gt;

&lt;p&gt;工程性0，lisp度0，底层亲和型100%&lt;/p&gt;

&lt;p&gt;宇宙主流语言中年纪最大的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;C++&lt;/h3&gt;

&lt;p&gt;为了让一般人也有饭吃，从C衍生的变种。写C需要一群高手，但C++只要一个高手把架子搭稳，一般市民也能写代码啦。写代码能谈得上是“工程”了
问题是搭架子的人如果水平不够，或者一般市民不听那个人的，那也是一场灾难。&lt;/p&gt;

&lt;p&gt;宇宙中特性最多的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Java&lt;/h3&gt;

&lt;p&gt;为了让半瓶水也能搭出能用的架子，工程性点到满还有些溢出，派生出了邪教“设计模式真理教”“OO拯救世界教”“全家都是接口党”等
由于邪教干扰，老东家不利索，新东家坑爹等等天灾人祸，原本应当更伟大的全领域语言在桌面GUI方面只有IDE方面所向披靡，服务端方面只有企业应用半壁江山。所幸天无绝人之路，老乡的谷哥把认他为义子，放进了安卓中，顿时前景又光明了起来&lt;/p&gt;

&lt;p&gt;宇宙中最适合煮咖啡的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_12&#34;&gt;ObjC&lt;/h3&gt;

&lt;p&gt;不怎么了解，展示了肾教淫威的语言
但从语言角度来说，完全躺在一个干爹怀里是很不好的征兆&lt;/p&gt;

&lt;p&gt;宇宙中开发环境最贵的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;大法好。独树一帜的语法，巧妙的设计，文武双全。小可以随手作脚本，大可以承载大型工程。漂亮的数据结构和模块系统。
可惜版本分裂得厉害，进入3以后就没有以后了&lt;/p&gt;

&lt;p&gt;宇宙中最关心空格的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;小清新。独树另一帜的语法，另一种巧妙的设计。据说实现需求速度飞快。
magic就是那种看上去无比优雅风骚性感，实际工业开发的时候发现千人千面，难以查错难以维护的风格，ruby以此为荣，所以我觉得始终摆脱不了玩具语言
不得不提到的是gem体系引领了第一波github的狂欢&lt;/p&gt;

&lt;p&gt;宇宙中名字最高贵的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;平淡无奇的语法中蕴含了不亚于ruby的“Lisp度”或者说元编程能力，但没人能想到真正使Javascript爆发的是原因来自于他non-block的天性。这个为异步而生的语言被Node选中，成为了完美的异步服务端脚本语言。
没有namespace的JS通过“每个库把自己的依赖库重复装在自己目录里”的方式，暴力解决了依赖冲突的千古问题。然后又恰逢HTML5迎面而来，于是天时地利人和，顺势成为社区最火的语言，github trending保持占领一半位置
不过没逃过“灵活”的语言的通病：难以调试、维护、查错。需要lead programmer严格把控整体风格。&lt;/p&gt;

&lt;p&gt;宇宙中“我会JS”涵义最丰富的语言&lt;/p&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;PHP&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;全宇宙最好的语言&lt;/strong&gt;
主流语言中唯一主动聚焦于单个场景的语言。“克制”是PHP语言设计的不二法门，早年主要参照C和Perl，有限地借鉴perl的特性，没有让整个语言都“动态掉”，5.0后开始注重工程性，大致借鉴Java，也是一步一个脚印，慢慢地借鉴，抄一行，停下来改自己三行，融会贯通以后再继续抄。
于是现在的PHP恰好站在一个非常平衡的位置，同时兼具一定的动态能力和较高的工程性，动如Laravel让人感叹RoR再世，静如Symfony、ZF让人以为回到了Java的世界。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;这是我在 &lt;a href=&#34;http://segmentfault.com/&#34;&gt;SegmentFault&lt;/a&gt; 上的问题回答选编，遵循&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34;&gt;CC BY-SA 3.0 CN&lt;/a&gt; 分享&lt;/p&gt;

&lt;p&gt;题图：万智【封口】&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m14-35.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[新姿势]我用过的静态站点生成器们</title>
      <link>http://inside.mcfog.wang/2015/01/tech4fun-1/</link>
      <pubDate>Fri, 09 Jan 2015 13:26:52 CST</pubDate>
      
      <guid>http://inside.mcfog.wang/2015/01/tech4fun-1/</guid>
      <description>

&lt;p&gt;随着诸如github pages的静态托管服务，静态站点生成器在近年有了极大的发展，静态生成+托管对托管环境要求低、维护简单、可配合版本控制，但又灵活多变，在程序员和geek群体中大有超越WordPress等动态博客程序的势头&lt;/p&gt;

&lt;p&gt;近年来个人也好项目也好，我也经常要用到静态生成器，这里把我玩过的静态生成器挨个做个简评&lt;/p&gt;

&lt;p&gt;&lt;em&gt;才、才不是什么玩博客程序的时间超过了写博客的时间呢&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Jekyll / OctoPress&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;和&lt;a href=&#34;http://octopress.org/&#34;&gt;OctoPress&lt;/a&gt;是最流行的静态博客系统。OctoPress是基于Jekyll的扩展，进一步方便了写作。&lt;/p&gt;

&lt;p&gt;在主题、插件数量上和wordpress一样对竞争对手有压倒性优势。上手简单，周边工具丰富。&lt;/p&gt;

&lt;p&gt;推荐给想更多把时间花在写字而不是折腾博客的人。&lt;/p&gt;

&lt;p&gt;缺点主要是文章量大的时候生成速度慢。&lt;/p&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Hexo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt;是NodeJS编写的静态博客系统，其生成速度快，主题数量相对也比较丰富。是OctoPress的优秀替代者。&lt;/p&gt;

&lt;p&gt;另外由于Node社区丰富的“方言”，写主题时天然有Jade/Stylus/Less等各种方言支持。&lt;/p&gt;

&lt;p&gt;推荐给希望生成速度快，主要写博客的人&lt;/p&gt;

&lt;p&gt;我用Hexo来写我的技术博客 &lt;a href=&#34;http://press.mcfog.wang/&#34;&gt;http://press.mcfog.wang/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Sculpin&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://sculpin.io/&#34;&gt;Sculpin&lt;/a&gt;是PHP的静态站点系统。Hexo和Octopress专注于博客，而有时候我们的需求不仅仅是博客，而是有类似CMS的页面生成需求。Sculpin是一个泛用途的静态站点生成系统，在支持博客常见的分页、分类tag等同时，也能较好地支持非博客的一般页面生成。
但Sculpin没有主题功能，没有严格分离内容和模版，第三方提供的现成模版也很少。&lt;/p&gt;

&lt;p&gt;推荐给没有主题需求，希望自己写页面，且需要博客之外的页面内容的人&lt;/p&gt;

&lt;p&gt;缺点是生成速度一般，第三方扩展少&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Hugo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;是GO语言编写的静态站点系统。其生成速度快，且在较好支持博客和非博客内容的同时提供了比较完备的主题系统。无论是自己写主题还是套用别人的主题都比较顺手。&lt;/p&gt;

&lt;p&gt;推荐给重视生成速度且希望具备一定的灵活性的人&lt;/p&gt;

&lt;p&gt;缺点是至今分页功能还没官方发布（还在下个release，有非官方的方案）&lt;/p&gt;

&lt;p&gt;这是本站&lt;a href=&#34;http://inside.mcfog.wang/&#34;&gt;http://inside.mcfog.wang/&lt;/a&gt;的生成器&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;总结&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;语言&lt;/th&gt;
&lt;th&gt;活跃度&lt;/th&gt;
&lt;th&gt;开箱即用&lt;/th&gt;
&lt;th&gt;主题数量&lt;/th&gt;
&lt;th&gt;主题系统&lt;/th&gt;
&lt;th&gt;生成速度&lt;/th&gt;
&lt;th&gt;博客适应性&lt;/th&gt;
&lt;th&gt;非博客适应性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Jekyll&lt;/td&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;OctoPress&lt;/td&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Hexo&lt;/td&gt;
&lt;td&gt;NodeJS&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sculpin&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Hugo&lt;/td&gt;
&lt;td&gt;GO&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;最后推荐一个静态站点生成器的统计列表 &lt;a href=&#34;https://staticsitegenerators.net&#34;&gt;https://staticsitegenerators.net&lt;/a&gt;，有机会准备玩玩&lt;a href=&#34;http://metalsmith.io&#34;&gt;http://metalsmith.io&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;题图：万智《Generator Servant》电机仆役&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/2015-q1/m15-143.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>